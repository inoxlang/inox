# ['Must' Calls] 

manifest {}

# 'must' calls are special calls that cause a panic if there is an error. 
# If there is no error the returned value is transformed.

# Let's see an example with `unhex`, a function that decodes an hexadecimal string.
# Regular call: a value of type Array(byte-slice, (error | nil)) is returned.
assign bytes error = unhex("...")

print("decoding error:", error)

# Must call: a value of type byte-slice is returned if there is no error.
# bytes = unhex!("...")

# Another example but with a user-defined function.
fn f(issue bool) (error | nil) {
    if issue {
        return Error("there is an issue !")
    }
    return nil
}

# Regular call: a value of type (error | nil) is returned.
err = f(true)

print("error returned by `f`:", err)

# Must call: on error the runtime panics, otherwise nil is returned.
nil_value = f!(false)      

# You can learn more about must calls here: https://github.com/inoxlang/inox/blob/main/docs/language-reference/functions.md#must-calls
