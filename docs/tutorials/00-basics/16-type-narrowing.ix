# [Binary Match and Type Narrowing] 

manifest {}

# Binary match expressions check whether the value on the left matches the pattern on the right.
print (1 match int)
print ({a: "1"} match {a: int})
print ({a: 1} match {a: int})

# Important: the right operand is interpreted as a pattern, so the following expressions are equivalent:
({a: 1} match {a: int})   # {a: int} is a pattern, not a object !
({a: 1} match %{a: int})

# The binary operator `not-match` is also available.

# Binary match expressions can be used for type narrowing.
fn func1(arg){
    if (arg match int){
        var integer int = arg
    }
}

fn func2(arg){
     assert (arg match {a: int})
     var object {a: int} = arg
}
