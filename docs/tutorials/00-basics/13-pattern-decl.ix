# [Named Patterns and Typing] 

manifest {}

# In Inox a pattern is a run-time value that matches values of a given kind and shape.
# Besides the pattern literals, there are other kinds of patterns in Inox such as object patterns: `%{a: int}`.

# Creating a named pattern `user` does not prevent you to name a variable `user`:
pattern user = {
    name: str
}

pattern small-int = int(0..10)

# Even though patterns are created at run time, they can act as types:
var n small-int = 0

fn add(a small-int, b small-int){
    return (a + b)
}

add(1, 2)

# uncomment to see the error.
# add(1, 2000)

user = {name: "foo"}

# true
(user match user)

# Alternative syntax
(user match %user)
