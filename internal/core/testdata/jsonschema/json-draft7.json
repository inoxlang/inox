{
    "__source": {
        "url": "https://github.com/json-schema-org/JSON-Schema-Test-Suite/tree/4ecd01f30bce36a61224fa0f46c2c3f0cf7481dc",
        "license": "MIT"
    },
    "additionalItems": [
        {
            "description": "additionalItems as schema",
            "schema": {
                "items": [{}],
                "additionalItems": {"type": "integer"}
            },
            "tests": [
                {
                    "description": "additional items match schema",
                    "data": [ null, 2, 3, 4 ],
                    "valid": true
                },
                {
                    "description": "additional items do not match schema",
                    "data": [ null, 2, 3, "foo" ],
                    "valid": false
                }
            ]
        },
        {
            "description": "when items is schema, additionalItems does nothing",
            "schema": {
                "items": {
                    "type": "integer"
                },
                "additionalItems": {
                    "type": "string"
                }
            },
            "tests": [
                {
                    "description": "valid with a array of type integers",
                    "data": [1,2,3],
                    "valid": true
                },
                {
                    "description": "invalid with a array of mixed types",
                    "data": [1,"2","3"],
                    "valid": false
                }
            ]
        },
        {
            "description": "when items is schema, boolean additionalItems does nothing",
            "schema": {
                "items": {},
                "additionalItems": false
            },
            "tests": [
                {
                    "description": "all items match schema",
                    "data": [ 1, 2, 3, 4, 5 ],
                    "valid": true
                }
            ]
        },
        {
            "description": "array of items with no additionalItems permitted",
            "schema": {
                "items": [{}, {}, {}],
                "additionalItems": false
            },
            "tests": [
                {
                    "description": "empty array",
                    "data": [ ],
                    "valid": true
                },
                {
                    "description": "fewer number of items present (1)",
                    "data": [ 1 ],
                    "valid": true
                },
                {
                    "description": "fewer number of items present (2)",
                    "data": [ 1, 2 ],
                    "valid": true
                },
                {
                    "description": "equal number of items present",
                    "data": [ 1, 2, 3 ],
                    "valid": true
                },
                {
                    "description": "additional items are not permitted",
                    "data": [ 1, 2, 3, 4 ],
                    "valid": false
                }
            ]
        },
        {
            "description": "additionalItems as false without items",
            "schema": {"additionalItems": false},
            "tests": [
                {
                    "description":
                        "items defaults to empty schema so everything is valid",
                    "data": [ 1, 2, 3, 4, 5 ],
                    "valid": true
                },
                {
                    "description": "ignores non-arrays",
                    "data": {"foo" : "bar"},
                    "valid": true
                }
            ]
        },
        {
            "description": "additionalItems are allowed by default",
            "schema": {"items": [{"type": "integer"}]},
            "tests": [
                {
                    "description": "only the first item is validated",
                    "data": [1, "foo", false],
                    "valid": true
                }
            ]
        },
        {
            "description": "additionalItems does not look in applicators, valid case",
            "schema": {
                "allOf": [
                    { "items": [ { "type": "integer" } ] }
                ],
                "additionalItems": { "type": "boolean" }
            },
            "tests": [
                {
                    "description": "items defined in allOf are not examined",
                    "data": [ 1, null ],
                    "valid": true
                }
            ]
        },
        {
            "description": "additionalItems does not look in applicators, invalid case",
            "schema": {
                "allOf": [
                    { "items": [ { "type": "integer" }, { "type": "string" } ] }
                ],
                "items": [ {"type": "integer" } ],
                "additionalItems": { "type": "boolean" }
            },
            "tests": [
                {
                    "description": "items defined in allOf are not examined",
                    "data": [ 1, "hello" ],
                    "valid": false
                }
            ]
        },
        {
            "description": "items validation adjusts the starting index for additionalItems",
            "schema": {
                "items": [ { "type": "string" } ],
                "additionalItems": { "type": "integer" }
            },
            "tests": [
                {
                    "description": "valid items",
                    "data": [ "x", 2, 3 ],
                    "valid": true
                },
                {
                    "description": "wrong type of second item",
                    "data": [ "x", "y" ],
                    "valid": false
                }
            ]
        },
        {
            "description": "additionalItems with null instance elements",
            "schema": {
                "additionalItems": {
                    "type": "null"
                }
            },
            "tests": [
                {
                    "description": "allows null elements",
                    "data": [ null ],
                    "valid": true
                }
            ]
        }
    ],
    "additionalProperties": [
        {
            "description":
                "additionalProperties being false does not allow other properties",
            "schema": {
                "properties": {"foo": {}, "bar": {}},
                "patternProperties": { "^v": {} },
                "additionalProperties": false
            },
            "tests": [
                {
                    "description": "no additional properties is valid",
                    "data": {"foo": 1},
                    "valid": true
                },
                {
                    "description": "an additional property is invalid",
                    "data": {"foo" : 1, "bar" : 2, "quux" : "boom"},
                    "valid": false
                },
                {
                    "description": "ignores arrays",
                    "data": [1, 2, 3],
                    "valid": true
                },
                {
                    "description": "ignores strings",
                    "data": "foobarbaz",
                    "valid": true
                },
                {
                    "description": "ignores other non-objects",
                    "data": 12,
                    "valid": true
                },
                {
                    "description": "patternProperties are not additional properties",
                    "data": {"foo":1, "vroom": 2},
                    "valid": true
                }
            ]
        },
        {
            "description": "non-ASCII pattern with additionalProperties",
            "schema": {
                "patternProperties": {"^á": {}},
                "additionalProperties": false
            },
            "tests": [
                {
                    "description": "matching the pattern is valid",
                    "data": {"ármányos": 2},
                    "valid": true
                },
                {
                    "description": "not matching the pattern is invalid",
                    "data": {"élmény": 2},
                    "valid": false
                }
            ]
        },
        {
            "description": "additionalProperties with schema",
            "schema": {
                "properties": {"foo": {}, "bar": {}},
                "additionalProperties": {"type": "boolean"}
            },
            "tests": [
                {
                    "description": "no additional properties is valid",
                    "data": {"foo": 1},
                    "valid": true
                },
                {
                    "description": "an additional valid property is valid",
                    "data": {"foo" : 1, "bar" : 2, "quux" : true},
                    "valid": true
                },
                {
                    "description": "an additional invalid property is invalid",
                    "data": {"foo" : 1, "bar" : 2, "quux" : 12},
                    "valid": false
                }
            ]
        },
        {
            "description":
                "additionalProperties can exist by itself",
            "schema": {
                "additionalProperties": {"type": "boolean"}
            },
            "tests": [
                {
                    "description": "an additional valid property is valid",
                    "data": {"foo" : true},
                    "valid": true
                },
                {
                    "description": "an additional invalid property is invalid",
                    "data": {"foo" : 1},
                    "valid": false
                }
            ]
        },
        {
            "description": "additionalProperties are allowed by default",
            "schema": {"properties": {"foo": {}, "bar": {}}},
            "tests": [
                {
                    "description": "additional properties are allowed",
                    "data": {"foo": 1, "bar": 2, "quux": true},
                    "valid": true
                }
            ]
        },
        {
            "description": "additionalProperties does not look in applicators",
            "schema": {
                "allOf": [
                    {"properties": {"foo": {}}}
                ],
                "additionalProperties": {"type": "boolean"}
            },
            "tests": [
                {
                    "description": "properties defined in allOf are not examined",
                    "data": {"foo": 1, "bar": true},
                    "valid": false
                }
            ]
        },
        {
            "description": "additionalProperties with null valued instance properties",
            "schema": {
                "additionalProperties": {
                    "type": "null"
                }
            },
            "tests": [
                {
                    "description": "allows null values",
                    "data": {"foo": null},
                    "valid": true
                }
            ]
        }
    ],
    "allOf": [
        {
            "description": "allOf",
            "schema": {
                "allOf": [
                    {
                        "properties": {
                            "bar": {"type": "integer"}
                        },
                        "required": ["bar"]
                    },
                    {
                        "properties": {
                            "foo": {"type": "string"}
                        },
                        "required": ["foo"]
                    }
                ]
            },
            "tests": [
                {
                    "description": "allOf",
                    "data": {"foo": "baz", "bar": 2},
                    "valid": true
                },
                {
                    "description": "mismatch second",
                    "data": {"foo": "baz"},
                    "valid": false
                },
                {
                    "description": "mismatch first",
                    "data": {"bar": 2},
                    "valid": false
                },
                {
                    "description": "wrong type",
                    "data": {"foo": "baz", "bar": "quux"},
                    "valid": false
                }
            ]
        },
        {
            "description": "allOf with base schema",
            "schema": {
                "properties": {"bar": {"type": "integer"}},
                "required": ["bar"],
                "allOf" : [
                    {
                        "properties": {
                            "foo": {"type": "string"}
                        },
                        "required": ["foo"]
                    },
                    {
                        "properties": {
                            "baz": {"type": "null"}
                        },
                        "required": ["baz"]
                    }
                ]
            },
            "tests": [
                {
                    "description": "valid",
                    "data": {"foo": "quux", "bar": 2, "baz": null},
                    "valid": true
                },
                {
                    "description": "mismatch base schema",
                    "data": {"foo": "quux", "baz": null},
                    "valid": false
                },
                {
                    "description": "mismatch first allOf",
                    "data": {"bar": 2, "baz": null},
                    "valid": false
                },
                {
                    "description": "mismatch second allOf",
                    "data": {"foo": "quux", "bar": 2},
                    "valid": false
                },
                {
                    "description": "mismatch both",
                    "data": {"bar": 2},
                    "valid": false
                }
            ]
        },
        {
            "description": "allOf simple types",
            "schema": {
                "allOf": [
                    {"maximum": 30},
                    {"minimum": 20}
                ]
            },
            "tests": [
                {
                    "description": "valid",
                    "data": 25,
                    "valid": true
                },
                {
                    "description": "mismatch one",
                    "data": 35,
                    "valid": false
                }
            ]
        },
        {
            "description": "allOf with boolean schemas, all true",
            "schema": {"allOf": [true, true]},
            "tests": [
                {
                    "description": "any value is valid",
                    "data": "foo",
                    "valid": true
                }
            ]
        },
        {
            "description": "allOf with boolean schemas, some false",
            "schema": {"allOf": [true, false]},
            "tests": [
                {
                    "description": "any value is invalid",
                    "data": "foo",
                    "valid": false
                }
            ]
        },
        {
            "description": "allOf with boolean schemas, all false",
            "schema": {"allOf": [false, false]},
            "tests": [
                {
                    "description": "any value is invalid",
                    "data": "foo",
                    "valid": false
                }
            ]
        },
        {
            "description": "allOf with one empty schema",
            "schema": {
                "allOf": [
                    {}
                ]
            },
            "tests": [
                {
                    "description": "any data is valid",
                    "data": 1,
                    "valid": true
                }
            ]
        },
        {
            "description": "allOf with two empty schemas",
            "schema": {
                "allOf": [
                    {},
                    {}
                ]
            },
            "tests": [
                {
                    "description": "any data is valid",
                    "data": 1,
                    "valid": true
                }
            ]
        },
        {
            "description": "allOf with the first empty schema",
            "schema": {
                "allOf": [
                    {},
                    { "type": "number" }
                ]
            },
            "tests": [
                {
                    "description": "number is valid",
                    "data": 1,
                    "valid": true
                },
                {
                    "description": "string is invalid",
                    "data": "foo",
                    "valid": false
                }
            ]
        },
        {
            "description": "allOf with the last empty schema",
            "schema": {
                "allOf": [
                    { "type": "number" },
                    {}
                ]
            },
            "tests": [
                {
                    "description": "number is valid",
                    "data": 1,
                    "valid": true
                },
                {
                    "description": "string is invalid",
                    "data": "foo",
                    "valid": false
                }
            ]
        },
        {
            "description": "nested allOf, to check validation semantics",
            "schema": {
                "allOf": [
                    {
                        "allOf": [
                            {
                                "type": "null"
                            }
                        ]
                    }
                ]
            },
            "tests": [
                {
                    "description": "null is valid",
                    "data": null,
                    "valid": true
                },
                {
                    "description": "anything non-null is invalid",
                    "data": 123,
                    "valid": false
                }
            ]
        },
        {
            "description": "allOf combined with anyOf, oneOf",
            "schema": {
                "allOf": [ { "multipleOf": 2 } ],
                "anyOf": [ { "multipleOf": 3 } ],
                "oneOf": [ { "multipleOf": 5 } ]
            },
            "tests": [
                {
                    "description": "allOf: false, anyOf: false, oneOf: false",
                    "data": 1,
                    "valid": false
                },
                {
                    "description": "allOf: false, anyOf: false, oneOf: true",
                    "data": 5,
                    "valid": false
                },
                {
                    "description": "allOf: false, anyOf: true, oneOf: false",
                    "data": 3,
                    "valid": false
                },
                {
                    "description": "allOf: false, anyOf: true, oneOf: true",
                    "data": 15,
                    "valid": false
                },
                {
                    "description": "allOf: true, anyOf: false, oneOf: false",
                    "data": 2,
                    "valid": false
                },
                {
                    "description": "allOf: true, anyOf: false, oneOf: true",
                    "data": 10,
                    "valid": false
                },
                {
                    "description": "allOf: true, anyOf: true, oneOf: false",
                    "data": 6,
                    "valid": false
                },
                {
                    "description": "allOf: true, anyOf: true, oneOf: true",
                    "data": 30,
                    "valid": true
                }
            ]
        }
    ],
    "anyOf": [
        {
            "description": "anyOf",
            "schema": {
                "anyOf": [
                    {
                        "type": "integer"
                    },
                    {
                        "minimum": 2
                    }
                ]
            },
            "tests": [
                {
                    "description": "first anyOf valid",
                    "data": 1,
                    "valid": true
                },
                {
                    "description": "second anyOf valid",
                    "data": 2.5,
                    "valid": true
                },
                {
                    "description": "both anyOf valid",
                    "data": 3,
                    "valid": true
                },
                {
                    "description": "neither anyOf valid",
                    "data": 1.5,
                    "valid": false
                }
            ]
        },
        {
            "description": "anyOf with base schema",
            "schema": {
                
                "type": "string",
                "anyOf" : [
                    {
                        "maxLength": 2
                    },
                    {
                        "minLength": 4
                    }
                ]
            },
            "tests": [
                {
                    "description": "mismatch base schema",
                    "data": 3,
                    "valid": false
                },
                {
                    "description": "one anyOf valid",
                    "data": "foobar",
                    "valid": true
                },
                {
                    "description": "both anyOf invalid",
                    "data": "foo",
                    "valid": false
                }
            ]
        },
        {
            "description": "anyOf with boolean schemas, all true",
            "schema": {"anyOf": [true, true]},
            "tests": [
                {
                    "description": "any value is valid",
                    "data": "foo",
                    "valid": true
                }
            ]
        },
        {
            "description": "anyOf with boolean schemas, some true",
            "schema": {"anyOf": [true, false]},
            "tests": [
                {
                    "description": "any value is valid",
                    "data": "foo",
                    "valid": true
                }
            ]
        },
        {
            "description": "anyOf with boolean schemas, all false",
            "schema": {"anyOf": [false, false]},
            "tests": [
                {
                    "description": "any value is invalid",
                    "data": "foo",
                    "valid": false
                }
            ]
        },
        {
            "description": "anyOf complex types",
            "schema": {
                "anyOf": [
                    {
                        "properties": {
                            "bar": {"type": "integer"}
                        },
                        "required": ["bar"]
                    },
                    {
                        "properties": {
                            "foo": {"type": "string"}
                        },
                        "required": ["foo"]
                    }
                ]
            },
            "tests": [
                {
                    "description": "first anyOf valid (complex)",
                    "data": {"bar": 2},
                    "valid": true
                },
                {
                    "description": "second anyOf valid (complex)",
                    "data": {"foo": "baz"},
                    "valid": true
                },
                {
                    "description": "both anyOf valid (complex)",
                    "data": {"foo": "baz", "bar": 2},
                    "valid": true
                },
                {
                    "description": "neither anyOf valid (complex)",
                    "data": {"foo": 2, "bar": "quux"},
                    "valid": false
                }
            ]
        },
        {
            "description": "anyOf with one empty schema",
            "schema": {
                "anyOf": [
                    { "type": "number" },
                    {}
                ]
            },
            "tests": [
                {
                    "description": "string is valid",
                    "data": "foo",
                    "valid": true
                },
                {
                    "description": "number is valid",
                    "data": 123,
                    "valid": true
                }
            ]
        },
        {
            "description": "nested anyOf, to check validation semantics",
            "schema": {
                "anyOf": [
                    {
                        "anyOf": [
                            {
                                "type": "null"
                            }
                        ]
                    }
                ]
            },
            "tests": [
                {
                    "description": "null is valid",
                    "data": null,
                    "valid": true
                },
                {
                    "description": "anything non-null is invalid",
                    "data": 123,
                    "valid": false
                }
            ]
        }
    ],
    "boolean_schema": [
        {
            "description": "boolean schema 'true'",
            "schema": true,
            "tests": [
                {
                    "description": "number is valid",
                    "data": 1,
                    "valid": true
                },
                {
                    "description": "string is valid",
                    "data": "foo",
                    "valid": true
                },
                {
                    "description": "boolean true is valid",
                    "data": true,
                    "valid": true
                },
                {
                    "description": "boolean false is valid",
                    "data": false,
                    "valid": true
                },
                {
                    "description": "null is valid",
                    "data": null,
                    "valid": true
                },
                {
                    "description": "object is valid",
                    "data": {"foo": "bar"},
                    "valid": true
                },
                {
                    "description": "empty object is valid",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "array is valid",
                    "data": ["foo"],
                    "valid": true
                },
                {
                    "description": "empty array is valid",
                    "data": [],
                    "valid": true
                }
            ]
        },
        {
            "description": "boolean schema 'false'",
            "schema": false,
            "tests": [
                {
                    "description": "number is invalid",
                    "data": 1,
                    "valid": false
                },
                {
                    "description": "string is invalid",
                    "data": "foo",
                    "valid": false
                },
                {
                    "description": "boolean true is invalid",
                    "data": true,
                    "valid": false
                },
                {
                    "description": "boolean false is invalid",
                    "data": false,
                    "valid": false
                },
                {
                    "description": "null is invalid",
                    "data": null,
                    "valid": false
                },
                {
                    "description": "object is invalid",
                    "data": {"foo": "bar"},
                    "valid": false
                },
                {
                    "description": "empty object is invalid",
                    "data": {},
                    "valid": false
                },
                {
                    "description": "array is invalid",
                    "data": ["foo"],
                    "valid": false
                },
                {
                    "description": "empty array is invalid",
                    "data": [],
                    "valid": false
                }
            ]
        }
    ],
    "const": [
        {
            "description": "const validation",
            "schema": {"const": 2},
            "tests": [
                {
                    "description": "same value is valid",
                    "data": 2,
                    "valid": true
                },
                {
                    "description": "another value is invalid",
                    "data": 5,
                    "valid": false
                },
                {
                    "description": "another type is invalid",
                    "data": "a",
                    "valid": false
                }
            ]
        },
        {
            "description": "const with object",
            "schema": {"const": {"foo": "bar", "baz": "bax"}},
            "tests": [
                {
                    "description": "same object is valid",
                    "data": {"foo": "bar", "baz": "bax"},
                    "valid": true
                },
                {
                    "description": "same object with different property order is valid",
                    "data": {"baz": "bax", "foo": "bar"},
                    "valid": true
                },
                {
                    "description": "another object is invalid",
                    "data": {"foo": "bar"},
                    "valid": false
                },
                {
                    "description": "another type is invalid",
                    "data": [1, 2],
                    "valid": false
                }
            ]
        },
        {
            "description": "const with array",
            "schema": {"const": [{ "foo": "bar" }]},
            "tests": [
                {
                    "description": "same array is valid",
                    "data": [{"foo": "bar"}],
                    "valid": true
                },
                {
                    "description": "another array item is invalid",
                    "data": [2],
                    "valid": false
                },
                {
                    "description": "array with additional items is invalid",
                    "data": [1, 2, 3],
                    "valid": false
                }
            ]
        },
        {
            "description": "const with null",
            "schema": {"const": null},
            "tests": [
                {
                    "description": "null is valid",
                    "data": null,
                    "valid": true
                },
                {
                    "description": "not null is invalid",
                    "data": 0,
                    "valid": false
                }
            ]
        },
        {
            "description": "const with false does not match 0",
            "schema": {"const": false},
            "tests": [
                {
                    "description": "false is valid",
                    "data": false,
                    "valid": true
                },
                {
                    "description": "integer zero is invalid",
                    "data": 0,
                    "valid": false
                },
                {
                    "description": "float zero is invalid",
                    "data": 0.0,
                    "valid": false
                }
            ]
        },
        {
            "description": "const with true does not match 1",
            "schema": {"const": true},
            "tests": [
                {
                    "description": "true is valid",
                    "data": true,
                    "valid": true
                },
                {
                    "description": "integer one is invalid",
                    "data": 1,
                    "valid": false
                },
                {
                    "description": "float one is invalid",
                    "data": 1.0,
                    "valid": false
                }
            ]
        },
        {
            "description": "const with [false] does not match [0]",
            "schema": {"const": [false]},
            "tests": [
                {
                    "description": "[false] is valid",
                    "data": [false],
                    "valid": true
                },
                {
                    "description": "[0] is invalid",
                    "data": [0],
                    "valid": false
                },
                {
                    "description": "[0.0] is invalid",
                    "data": [0.0],
                    "valid": false
                }
            ]
        },
        {
            "description": "const with [true] does not match [1]",
            "schema": {"const": [true]},
            "tests": [
                {
                    "description": "[true] is valid",
                    "data": [true],
                    "valid": true
                },
                {
                    "description": "[1] is invalid",
                    "data": [1],
                    "valid": false
                },
                {
                    "description": "[1.0] is invalid",
                    "data": [1.0],
                    "valid": false
                }
            ]
        },
        {
            "description": "const with {\"a\": false} does not match {\"a\": 0}",
            "schema": {"const": {"a": false}},
            "tests": [
                {
                    "description": "{\"a\": false} is valid",
                    "data": {"a": false},
                    "valid": true
                },
                {
                    "description": "{\"a\": 0} is invalid",
                    "data": {"a": 0},
                    "valid": false
                },
                {
                    "description": "{\"a\": 0.0} is invalid",
                    "data": {"a": 0.0},
                    "valid": false
                }
            ]
        },
        {
            "description": "const with {\"a\": true} does not match {\"a\": 1}",
            "schema": {"const": {"a": true}},
            "tests": [
                {
                    "description": "{\"a\": true} is valid",
                    "data": {"a": true},
                    "valid": true
                },
                {
                    "description": "{\"a\": 1} is invalid",
                    "data": {"a": 1},
                    "valid": false
                },
                {
                    "description": "{\"a\": 1.0} is invalid",
                    "data": {"a": 1.0},
                    "valid": false
                }
            ]
        },
        {
            "description": "const with 0 does not match other zero-like types",
            "schema": {"const": 0},
            "tests": [
                {
                    "description": "false is invalid",
                    "data": false,
                    "valid": false
                },
                {
                    "description": "integer zero is valid",
                    "data": 0,
                    "valid": true
                },
                {
                    "description": "float zero is valid",
                    "data": 0.0,
                    "valid": true
                },
                {
                    "description": "empty object is invalid",
                    "data": {},
                    "valid": false
                },
                {
                    "description": "empty array is invalid",
                    "data": [],
                    "valid": false
                },
                {
                    "description": "empty string is invalid",
                    "data": "",
                    "valid": false
                }
            ]
        },
        {
            "description": "const with 1 does not match true",
            "schema": {"const": 1},
            "tests": [
                {
                    "description": "true is invalid",
                    "data": true,
                    "valid": false
                },
                {
                    "description": "integer one is valid",
                    "data": 1,
                    "valid": true
                },
                {
                    "description": "float one is valid",
                    "data": 1.0,
                    "valid": true
                }
            ]
        },
        {
            "description": "const with -2.0 matches integer and float types",
            "schema": {"const": -2.0},
            "tests": [
                {
                    "description": "integer -2 is valid",
                    "data": -2,
                    "valid": true
                },
                {
                    "description": "integer 2 is invalid",
                    "data": 2,
                    "valid": false
                },
                {
                    "description": "float -2.0 is valid",
                    "data": -2.0,
                    "valid": true
                },
                {
                    "description": "float 2.0 is invalid",
                    "data": 2.0,
                    "valid": false
                },
                {
                    "description": "float -2.00001 is invalid",
                    "data": -2.00001,
                    "valid": false
                }
            ]
        },
        {
            "description": "float and integers are equal up to 64-bit representation limits",
            "schema": {"const": 9007199254740992},
            "tests": [
                {
                    "description": "integer is valid",
                    "data": 9007199254740992,
                    "valid": true
                },
                {
                    "description": "integer minus one is invalid",
                    "data": 9007199254740991,
                    "valid": false
                },
                {
                    "description": "float is valid",
                    "data": 9007199254740992.0,
                    "valid": true
                },
                {
                    "description": "float minus one is invalid",
                    "data": 9007199254740991.0,
                    "valid": false
                }
            ]
        },
        {
            "description": "nul characters in strings",
            "schema": { "const": "hello\u0000there" },
            "tests": [
                {
                    "description": "match string with nul",
                    "data": "hello\u0000there",
                    "valid": true
                },
                {
                    "description": "do not match string lacking nul",
                    "data": "hellothere",
                    "valid": false
                }
            ]
        }
    ],
    "contains": [
        {
            "description": "contains keyword validation",
            "schema": {
                "contains": {"minimum": 5}
            },
            "tests": [
                {
                    "description": "array with item matching schema (5) is valid",
                    "data": [3, 4, 5],
                    "valid": true
                },
                {
                    "description": "array with item matching schema (6) is valid",
                    "data": [3, 4, 6],
                    "valid": true
                },
                {
                    "description": "array with two items matching schema (5, 6) is valid",
                    "data": [3, 4, 5, 6],
                    "valid": true
                },
                {
                    "description": "array without items matching schema is invalid",
                    "data": [2, 3, 4],
                    "valid": false
                },
                {
                    "description": "empty array is invalid",
                    "data": [],
                    "valid": false
                },
                {
                    "description": "not array is valid",
                    "data": {},
                    "valid": true
                }
            ]
        },
        {
            "description": "contains keyword with const keyword",
            "schema": {
                "contains": { "const": 5 }
            },
            "tests": [
                {
                    "description": "array with item 5 is valid",
                    "data": [3, 4, 5],
                    "valid": true
                },
                {
                    "description": "array with two items 5 is valid",
                    "data": [3, 4, 5, 5],
                    "valid": true
                },
                {
                    "description": "array without item 5 is invalid",
                    "data": [1, 2, 3, 4],
                    "valid": false
                }
            ]
        },
        {
            "description": "contains keyword with boolean schema true",
            "schema": {"contains": true},
            "tests": [
                {
                    "description": "any non-empty array is valid",
                    "data": ["foo"],
                    "valid": true
                },
                {
                    "description": "empty array is invalid",
                    "data": [],
                    "valid": false
                }
            ]
        },
        {
            "description": "contains keyword with boolean schema false",
            "schema": {"contains": false},
            "tests": [
                {
                    "description": "any non-empty array is invalid",
                    "data": ["foo"],
                    "valid": false
                },
                {
                    "description": "empty array is invalid",
                    "data": [],
                    "valid": false
                },
                {
                    "description": "non-arrays are valid",
                    "data": "contains does not apply to strings",
                    "valid": true
                }
            ]
        },
        {
            "description": "items + contains",
            "schema": {
                "items": { "multipleOf": 2 },
                "contains": { "multipleOf": 3 }
            },
            "tests": [
                {
                    "description": "matches items, does not match contains",
                    "data": [ 2, 4, 8 ],
                    "valid": false
                },
                {
                    "description": "does not match items, matches contains",
                    "data": [ 3, 6, 9 ],
                    "valid": false
                },
                {
                    "description": "matches both items and contains",
                    "data": [ 6, 12 ],
                    "valid": true
                },
                {
                    "description": "matches neither items nor contains",
                    "data": [ 1, 5 ],
                    "valid": false
                }
            ]
        },
        {
            "description": "contains with false if subschema",
            "schema": {
                "contains": {
                    "if": false,
                    "else": true
                }
            },
            "tests": [
                {
                    "description": "any non-empty array is valid",
                    "data": ["foo"],
                    "valid": true
                },
                {
                    "description": "empty array is invalid",
                    "data": [],
                    "valid": false
                }
            ]
        },
        {
            "description": "contains with null instance elements",
            "schema": {
                "contains": {
                    "type": "null"
                }
            },
            "tests": [
                {
                    "description": "allows null items",
                    "data": [ null ],
                    "valid": true
                }
            ]
        }
    ],
    "default": [
        {
            "description": "invalid type for default",
            "schema": {
                "properties": {
                    "foo": {
                        "type": "integer",
                        "default": []
                    }
                }
            },
            "tests": [
                {
                    "description": "valid when property is specified",
                    "data": {"foo": 13},
                    "valid": true
                },
                {
                    "description": "still valid when the invalid default is used",
                    "data": {},
                    "valid": true
                }
            ]
        },
        {
            "description": "invalid string value for default",
            "schema": {
                "properties": {
                    "bar": {
                        "type": "string",
                        "minLength": 4,
                        "default": "bad"
                    }
                }
            },
            "tests": [
                {
                    "description": "valid when property is specified",
                    "data": {"bar": "good"},
                    "valid": true
                },
                {
                    "description": "still valid when the invalid default is used",
                    "data": {},
                    "valid": true
                }
            ]
        },
        {
            "description": "the default keyword does not do anything if the property is missing",
            "schema": {
                "type": "object",
                "properties": {
                    "alpha": {
                        "type": "number",
                        "maximum": 3,
                        "default": 5
                    }
                }
            },
            "tests": [
                {
                    "description": "an explicit property value is checked against maximum (passing)",
                    "data": { "alpha": 1 },
                    "valid": true
                },
                {
                    "description": "an explicit property value is checked against maximum (failing)",
                    "data": { "alpha": 5 },
                    "valid": false
                },
                {
                    "description": "missing properties are not filled in with the default",
                    "data": {},
                    "valid": true
                }
            ]
        }
    ],
    "definitions": [
        {
            "description": "validate definition against metaschema",
            "schema": {"$ref": "http://json-schema.org/draft-07/schema#"},
            "tests": [
                {
                    "description": "valid definition schema",
                    "data": {
                        "definitions": {
                            "foo": {"type": "integer"}
                        }
                    },
                    "valid": true
                },
                {
                    "description": "invalid definition schema",
                    "data": {
                        "definitions": {
                            "foo": {"type": 1}
                        }
                    },
                    "valid": false
                }
            ]
        }
    ],
    "dependencies": [
        {
            "description": "dependencies",
            "schema": {
                "dependencies": {"bar": ["foo"]}
            },
            "tests": [
                {
                    "description": "neither",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "nondependant",
                    "data": {"foo": 1},
                    "valid": true
                },
                {
                    "description": "with dependency",
                    "data": {"foo": 1, "bar": 2},
                    "valid": true
                },
                {
                    "description": "missing dependency",
                    "data": {"bar": 2},
                    "valid": false
                },
                {
                    "description": "ignores arrays",
                    "data": ["bar"],
                    "valid": true
                },
                {
                    "description": "ignores strings",
                    "data": "foobar",
                    "valid": true
                },
                {
                    "description": "ignores other non-objects",
                    "data": 12,
                    "valid": true
                }
            ]
        },
        {
            "description": "dependencies with empty array",
            "schema": {
                "dependencies": {"bar": []}
            },
            "tests": [
                {
                    "description": "empty object",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "object with one property",
                    "data": {"bar": 2},
                    "valid": true
                },
                {
                    "description": "non-object is valid",
                    "data": 1,
                    "valid": true
                }
            ]
        },
        {
            "description": "multiple dependencies",
            "schema": {
                "dependencies": {"quux": ["foo", "bar"]}
            },
            "tests": [
                {
                    "description": "neither",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "nondependants",
                    "data": {"foo": 1, "bar": 2},
                    "valid": true
                },
                {
                    "description": "with dependencies",
                    "data": {"foo": 1, "bar": 2, "quux": 3},
                    "valid": true
                },
                {
                    "description": "missing dependency",
                    "data": {"foo": 1, "quux": 2},
                    "valid": false
                },
                {
                    "description": "missing other dependency",
                    "data": {"bar": 1, "quux": 2},
                    "valid": false
                },
                {
                    "description": "missing both dependencies",
                    "data": {"quux": 1},
                    "valid": false
                }
            ]
        },
        {
            "description": "multiple dependencies subschema",
            "schema": {
                "dependencies": {
                    "bar": {
                        "properties": {
                            "foo": {"type": "integer"},
                            "bar": {"type": "integer"}
                        }
                    }
                }
            },
            "tests": [
                {
                    "description": "valid",
                    "data": {"foo": 1, "bar": 2},
                    "valid": true
                },
                {
                    "description": "no dependency",
                    "data": {"foo": "quux"},
                    "valid": true
                },
                {
                    "description": "wrong type",
                    "data": {"foo": "quux", "bar": 2},
                    "valid": false
                },
                {
                    "description": "wrong type other",
                    "data": {"foo": 2, "bar": "quux"},
                    "valid": false
                },
                {
                    "description": "wrong type both",
                    "data": {"foo": "quux", "bar": "quux"},
                    "valid": false
                }
            ]
        },
        {
            "description": "dependencies with boolean subschemas",
            "schema": {
                "dependencies": {
                    "foo": true,
                    "bar": false
                }
            },
            "tests": [
                {
                    "description": "object with property having schema true is valid",
                    "data": {"foo": 1},
                    "valid": true
                },
                {
                    "description": "object with property having schema false is invalid",
                    "data": {"bar": 2},
                    "valid": false
                },
                {
                    "description": "object with both properties is invalid",
                    "data": {"foo": 1, "bar": 2},
                    "valid": false
                },
                {
                    "description": "empty object is valid",
                    "data": {},
                    "valid": true
                }
            ]
        },
        {
            "description": "dependencies with escaped characters",
            "schema": {
                "dependencies": {
                    "foo\nbar": ["foo\rbar"],
                    "foo\tbar": {
                        "minProperties": 4
                    },
                    "foo'bar": {"required": ["foo\"bar"]},
                    "foo\"bar": ["foo'bar"]
                }
            },
            "tests": [
                {
                    "description": "valid object 1",
                    "data": {
                        "foo\nbar": 1,
                        "foo\rbar": 2
                    },
                    "valid": true
                },
                {
                    "description": "valid object 2",
                    "data": {
                        "foo\tbar": 1,
                        "a": 2,
                        "b": 3,
                        "c": 4
                    },
                    "valid": true
                },
                {
                    "description": "valid object 3",
                    "data": {
                        "foo'bar": 1,
                        "foo\"bar": 2
                    },
                    "valid": true
                },
                {
                    "description": "invalid object 1",
                    "data": {
                        "foo\nbar": 1,
                        "foo": 2
                    },
                    "valid": false
                },
                {
                    "description": "invalid object 2",
                    "data": {
                        "foo\tbar": 1,
                        "a": 2
                    },
                    "valid": false
                },
                {
                    "description": "invalid object 3",
                    "data": {
                        "foo'bar": 1
                    },
                    "valid": false
                },
                {
                    "description": "invalid object 4",
                    "data": {
                        "foo\"bar": 2
                    },
                    "valid": false
                }
            ]
        },
        {
            "description": "dependent subschema incompatible with root",
            "schema": {
                "properties": {
                    "foo": {}
                },
                "dependencies": {
                    "foo": {
                        "properties": {
                            "bar": {}
                        },
                        "additionalProperties": false
                    }
                }
            },
            "tests": [
                {
                    "description": "matches root",
                    "data": {"foo": 1},
                    "valid": false
                },
                {
                    "description": "matches dependency",
                    "data": {"bar": 1},
                    "valid": true
                },
                {
                    "description": "matches both",
                    "data": {"foo": 1, "bar": 2},
                    "valid": false
                },
                {
                    "description": "no dependency",
                    "data": {"baz": 1},
                    "valid": true
                }
            ]
        }
    ],
    "enum": [
        {
            "description": "simple enum validation",
            "schema": {"enum": [1, 2, 3]},
            "tests": [
                {
                    "description": "one of the enum is valid",
                    "data": 1,
                    "valid": true
                },
                {
                    "description": "something else is invalid",
                    "data": 4,
                    "valid": false
                }
            ]
        },
        {
            "description": "heterogeneous enum validation",
            "schema": {"enum": [6, "foo", [], true, {"foo": 12}]},
            "tests": [
                {
                    "description": "one of the enum is valid",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "something else is invalid",
                    "data": null,
                    "valid": false
                },
                {
                    "description": "objects are deep compared",
                    "data": {"foo": false},
                    "valid": false
                },
                {
                    "description": "valid object matches",
                    "data": {"foo": 12},
                    "valid": true
                },
                {
                    "description": "extra properties in object is invalid",
                    "data": {"foo": 12, "boo": 42},
                    "valid": false
                }
            ]
        },
        {
            "description": "heterogeneous enum-with-null validation",
            "schema": { "enum": [6, null] },
            "tests": [
                {
                    "description": "null is valid",
                    "data": null,
                    "valid": true
                },
                {
                    "description": "number is valid",
                    "data": 6,
                    "valid": true
                },
                {
                    "description": "something else is invalid",
                    "data": "test",
                    "valid": false
                }
            ]
        },
        {
            "description": "enums in properties",
            "schema": {
                "type":"object",
                "properties": {
                    "foo": {"enum":["foo"]},
                    "bar": {"enum":["bar"]}
                },
                "required": ["bar"]
            },
            "tests": [
                {
                    "description": "both properties are valid",
                    "data": {"foo":"foo", "bar":"bar"},
                    "valid": true
                },
                {
                    "description": "wrong foo value",
                    "data": {"foo":"foot", "bar":"bar"},
                    "valid": false
                },
                {
                    "description": "wrong bar value",
                    "data": {"foo":"foo", "bar":"bart"},
                    "valid": false
                },
                {
                    "description": "missing optional property is valid",
                    "data": {"bar":"bar"},
                    "valid": true
                },
                {
                    "description": "missing required property is invalid",
                    "data": {"foo":"foo"},
                    "valid": false
                },
                {
                    "description": "missing all properties is invalid",
                    "data": {},
                    "valid": false
                }
            ]
        },
        {
            "description": "enum with escaped characters",
            "schema": {
                "enum": ["foo\nbar", "foo\rbar"]
            },
            "tests": [
                {
                    "description": "member 1 is valid",
                    "data": "foo\nbar",
                    "valid": true
                },
                {
                    "description": "member 2 is valid",
                    "data": "foo\rbar",
                    "valid": true
                },
                {
                    "description": "another string is invalid",
                    "data": "abc",
                    "valid": false
                }
            ]
        },
        {
            "description": "enum with false does not match 0",
            "schema": {"enum": [false]},
            "tests": [
                {
                    "description": "false is valid",
                    "data": false,
                    "valid": true
                },
                {
                    "description": "integer zero is invalid",
                    "data": 0,
                    "valid": false
                },
                {
                    "description": "float zero is invalid",
                    "data": 0.0,
                    "valid": false
                }
            ]
        },
        {
            "description": "enum with true does not match 1",
            "schema": {"enum": [true]},
            "tests": [
                {
                    "description": "true is valid",
                    "data": true,
                    "valid": true
                },
                {
                    "description": "integer one is invalid",
                    "data": 1,
                    "valid": false
                },
                {
                    "description": "float one is invalid",
                    "data": 1.0,
                    "valid": false
                }
            ]
        },
        {
            "description": "enum with 0 does not match false",
            "schema": {"enum": [0]},
            "tests": [
                {
                    "description": "false is invalid",
                    "data": false,
                    "valid": false
                },
                {
                    "description": "integer zero is valid",
                    "data": 0,
                    "valid": true
                },
                {
                    "description": "float zero is valid",
                    "data": 0.0,
                    "valid": true
                }
            ]
        },
        {
            "description": "enum with 1 does not match true",
            "schema": {"enum": [1]},
            "tests": [
                {
                    "description": "true is invalid",
                    "data": true,
                    "valid": false
                },
                {
                    "description": "integer one is valid",
                    "data": 1,
                    "valid": true
                },
                {
                    "description": "float one is valid",
                    "data": 1.0,
                    "valid": true
                }
            ]
        },
        {
            "description": "nul characters in strings",
            "schema": { "enum": [ "hello\u0000there" ] },
            "tests": [
                {
                    "description": "match string with nul",
                    "data": "hello\u0000there",
                    "valid": true
                },
                {
                    "description": "do not match string lacking nul",
                    "data": "hellothere",
                    "valid": false
                }
            ]
        }
    ],
    "exclusiveMaximum": [
        {
            "description": "exclusiveMaximum validation",
            "schema": {
                "exclusiveMaximum": 3.0
            },
            "tests": [
                {
                    "description": "below the exclusiveMaximum is valid",
                    "data": 2.2,
                    "valid": true
                },
                {
                    "description": "boundary point is invalid",
                    "data": 3.0,
                    "valid": false
                },
                {
                    "description": "above the exclusiveMaximum is invalid",
                    "data": 3.5,
                    "valid": false
                },
                {
                    "description": "ignores non-numbers",
                    "data": "x",
                    "valid": true
                }
            ]
        }
    ],
    "exclusiveMinimum": [
        {
            "description": "exclusiveMinimum validation",
            "schema": {
                "exclusiveMinimum": 1.1
            },
            "tests": [
                {
                    "description": "above the exclusiveMinimum is valid",
                    "data": 1.2,
                    "valid": true
                },
                {
                    "description": "boundary point is invalid",
                    "data": 1.1,
                    "valid": false
                },
                {
                    "description": "below the exclusiveMinimum is invalid",
                    "data": 0.6,
                    "valid": false
                },
                {
                    "description": "ignores non-numbers",
                    "data": "x",
                    "valid": true
                }
            ]
        }
    ],
    "format": [
        {
            "description": "email format",
            "schema": { "format": "email" },
            "tests": [
                {
                    "description": "all string formats ignore integers",
                    "data": 12,
                    "valid": true
                },
                {
                    "description": "all string formats ignore floats",
                    "data": 13.7,
                    "valid": true
                },
                {
                    "description": "all string formats ignore objects",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "all string formats ignore arrays",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "all string formats ignore booleans",
                    "data": false,
                    "valid": true
                },
                {
                    "description": "all string formats ignore nulls",
                    "data": null,
                    "valid": true
                }
            ]
        },
        {
            "description": "idn-email format",
            "schema": { "format": "idn-email" },
            "tests": [
                {
                    "description": "all string formats ignore integers",
                    "data": 12,
                    "valid": true
                },
                {
                    "description": "all string formats ignore floats",
                    "data": 13.7,
                    "valid": true
                },
                {
                    "description": "all string formats ignore objects",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "all string formats ignore arrays",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "all string formats ignore booleans",
                    "data": false,
                    "valid": true
                },
                {
                    "description": "all string formats ignore nulls",
                    "data": null,
                    "valid": true
                }
            ]
        },
        {
            "description": "regex format",
            "schema": { "format": "regex" },
            "tests": [
                {
                    "description": "all string formats ignore integers",
                    "data": 12,
                    "valid": true
                },
                {
                    "description": "all string formats ignore floats",
                    "data": 13.7,
                    "valid": true
                },
                {
                    "description": "all string formats ignore objects",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "all string formats ignore arrays",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "all string formats ignore booleans",
                    "data": false,
                    "valid": true
                },
                {
                    "description": "all string formats ignore nulls",
                    "data": null,
                    "valid": true
                }
            ]
        },
        {
            "description": "ipv4 format",
            "schema": { "format": "ipv4" },
            "tests": [
                {
                    "description": "all string formats ignore integers",
                    "data": 12,
                    "valid": true
                },
                {
                    "description": "all string formats ignore floats",
                    "data": 13.7,
                    "valid": true
                },
                {
                    "description": "all string formats ignore objects",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "all string formats ignore arrays",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "all string formats ignore booleans",
                    "data": false,
                    "valid": true
                },
                {
                    "description": "all string formats ignore nulls",
                    "data": null,
                    "valid": true
                }
            ]
        },
        {
            "description": "ipv6 format",
            "schema": { "format": "ipv6" },
            "tests": [
                {
                    "description": "all string formats ignore integers",
                    "data": 12,
                    "valid": true
                },
                {
                    "description": "all string formats ignore floats",
                    "data": 13.7,
                    "valid": true
                },
                {
                    "description": "all string formats ignore objects",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "all string formats ignore arrays",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "all string formats ignore booleans",
                    "data": false,
                    "valid": true
                },
                {
                    "description": "all string formats ignore nulls",
                    "data": null,
                    "valid": true
                }
            ]
        },
        {
            "description": "idn-hostname format",
            "schema": { "format": "idn-hostname" },
            "tests": [
                {
                    "description": "all string formats ignore integers",
                    "data": 12,
                    "valid": true
                },
                {
                    "description": "all string formats ignore floats",
                    "data": 13.7,
                    "valid": true
                },
                {
                    "description": "all string formats ignore objects",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "all string formats ignore arrays",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "all string formats ignore booleans",
                    "data": false,
                    "valid": true
                },
                {
                    "description": "all string formats ignore nulls",
                    "data": null,
                    "valid": true
                }
            ]
        },
        {
            "description": "hostname format",
            "schema": { "format": "hostname" },
            "tests": [
                {
                    "description": "all string formats ignore integers",
                    "data": 12,
                    "valid": true
                },
                {
                    "description": "all string formats ignore floats",
                    "data": 13.7,
                    "valid": true
                },
                {
                    "description": "all string formats ignore objects",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "all string formats ignore arrays",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "all string formats ignore booleans",
                    "data": false,
                    "valid": true
                },
                {
                    "description": "all string formats ignore nulls",
                    "data": null,
                    "valid": true
                }
            ]
        },
        {
            "description": "date format",
            "schema": { "format": "date" },
            "tests": [
                {
                    "description": "all string formats ignore integers",
                    "data": 12,
                    "valid": true
                },
                {
                    "description": "all string formats ignore floats",
                    "data": 13.7,
                    "valid": true
                },
                {
                    "description": "all string formats ignore objects",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "all string formats ignore arrays",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "all string formats ignore booleans",
                    "data": false,
                    "valid": true
                },
                {
                    "description": "all string formats ignore nulls",
                    "data": null,
                    "valid": true
                }
            ]
        },
        {
            "description": "date-time format",
            "schema": { "format": "date-time" },
            "tests": [
                {
                    "description": "all string formats ignore integers",
                    "data": 12,
                    "valid": true
                },
                {
                    "description": "all string formats ignore floats",
                    "data": 13.7,
                    "valid": true
                },
                {
                    "description": "all string formats ignore objects",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "all string formats ignore arrays",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "all string formats ignore booleans",
                    "data": false,
                    "valid": true
                },
                {
                    "description": "all string formats ignore nulls",
                    "data": null,
                    "valid": true
                }
            ]
        },
        {
            "description": "time format",
            "schema": { "format": "time" },
            "tests": [
                {
                    "description": "all string formats ignore integers",
                    "data": 12,
                    "valid": true
                },
                {
                    "description": "all string formats ignore floats",
                    "data": 13.7,
                    "valid": true
                },
                {
                    "description": "all string formats ignore objects",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "all string formats ignore arrays",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "all string formats ignore booleans",
                    "data": false,
                    "valid": true
                },
                {
                    "description": "all string formats ignore nulls",
                    "data": null,
                    "valid": true
                }
            ]
        },
        {
            "description": "json-pointer format",
            "schema": { "format": "json-pointer" },
            "tests": [
                {
                    "description": "all string formats ignore integers",
                    "data": 12,
                    "valid": true
                },
                {
                    "description": "all string formats ignore floats",
                    "data": 13.7,
                    "valid": true
                },
                {
                    "description": "all string formats ignore objects",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "all string formats ignore arrays",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "all string formats ignore booleans",
                    "data": false,
                    "valid": true
                },
                {
                    "description": "all string formats ignore nulls",
                    "data": null,
                    "valid": true
                }
            ]
        },
        {
            "description": "relative-json-pointer format",
            "schema": { "format": "relative-json-pointer" },
            "tests": [
                {
                    "description": "all string formats ignore integers",
                    "data": 12,
                    "valid": true
                },
                {
                    "description": "all string formats ignore floats",
                    "data": 13.7,
                    "valid": true
                },
                {
                    "description": "all string formats ignore objects",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "all string formats ignore arrays",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "all string formats ignore booleans",
                    "data": false,
                    "valid": true
                },
                {
                    "description": "all string formats ignore nulls",
                    "data": null,
                    "valid": true
                }
            ]
        },
        {
            "description": "iri format",
            "schema": { "format": "iri" },
            "tests": [
                {
                    "description": "all string formats ignore integers",
                    "data": 12,
                    "valid": true
                },
                {
                    "description": "all string formats ignore floats",
                    "data": 13.7,
                    "valid": true
                },
                {
                    "description": "all string formats ignore objects",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "all string formats ignore arrays",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "all string formats ignore booleans",
                    "data": false,
                    "valid": true
                },
                {
                    "description": "all string formats ignore nulls",
                    "data": null,
                    "valid": true
                }
            ]
        },
        {
            "description": "iri-reference format",
            "schema": { "format": "iri-reference" },
            "tests": [
                {
                    "description": "all string formats ignore integers",
                    "data": 12,
                    "valid": true
                },
                {
                    "description": "all string formats ignore floats",
                    "data": 13.7,
                    "valid": true
                },
                {
                    "description": "all string formats ignore objects",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "all string formats ignore arrays",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "all string formats ignore booleans",
                    "data": false,
                    "valid": true
                },
                {
                    "description": "all string formats ignore nulls",
                    "data": null,
                    "valid": true
                }
            ]
        },
        {
            "description": "uri format",
            "schema": { "format": "uri" },
            "tests": [
                {
                    "description": "all string formats ignore integers",
                    "data": 12,
                    "valid": true
                },
                {
                    "description": "all string formats ignore floats",
                    "data": 13.7,
                    "valid": true
                },
                {
                    "description": "all string formats ignore objects",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "all string formats ignore arrays",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "all string formats ignore booleans",
                    "data": false,
                    "valid": true
                },
                {
                    "description": "all string formats ignore nulls",
                    "data": null,
                    "valid": true
                }
            ]
        },
        {
            "description": "uri-reference format",
            "schema": { "format": "uri-reference" },
            "tests": [
                {
                    "description": "all string formats ignore integers",
                    "data": 12,
                    "valid": true
                },
                {
                    "description": "all string formats ignore floats",
                    "data": 13.7,
                    "valid": true
                },
                {
                    "description": "all string formats ignore objects",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "all string formats ignore arrays",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "all string formats ignore booleans",
                    "data": false,
                    "valid": true
                },
                {
                    "description": "all string formats ignore nulls",
                    "data": null,
                    "valid": true
                }
            ]
        },
        {
            "description": "uri-template format",
            "schema": { "format": "uri-template" },
            "tests": [
                {
                    "description": "all string formats ignore integers",
                    "data": 12,
                    "valid": true
                },
                {
                    "description": "all string formats ignore floats",
                    "data": 13.7,
                    "valid": true
                },
                {
                    "description": "all string formats ignore objects",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "all string formats ignore arrays",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "all string formats ignore booleans",
                    "data": false,
                    "valid": true
                },
                {
                    "description": "all string formats ignore nulls",
                    "data": null,
                    "valid": true
                }
            ]
        }
    ],
    "id": [
        {
            "description": "id inside an enum is not a real identifier",
            "comment": "the implementation must not be confused by an id buried in the enum",
            "schema": {
                "definitions": {
                    "id_in_enum": {
                        "enum": [
                            {
                              "$id": "https://localhost:1234/id/my_identifier.json",
                              "type": "null"
                            }
                        ]
                    },
                    "real_id_in_schema": {
                        "$id": "https://localhost:1234/id/my_identifier.json",
                        "type": "string"
                    },
                    "zzz_id_in_const": {
                        "const": {
                            "$id": "https://localhost:1234/id/my_identifier.json",
                            "type": "null"
                        }
                    }
                },
                "anyOf": [
                    { "$ref": "#/definitions/id_in_enum" },
                    { "$ref": "https://localhost:1234/id/my_identifier.json" }
                ]
            },
            "tests": [
                {
                    "description": "exact match to enum, and type matches",
                    "data": {
                        "$id": "https://localhost:1234/id/my_identifier.json",
                        "type": "null"
                    },
                    "valid": true
                },
                {
                    "description": "match $ref to id",
                    "data": "a string to match #/definitions/id_in_enum",
                    "valid": true
                },
                {
                    "description": "no match on enum or $ref to id",
                    "data": 1,
                    "valid": false
                }
            ]
        },
        {
            "description": "non-schema object containing a plain-name $id property",
            "schema": {
                "definitions": {
                    "const_not_anchor": {
                        "const": {
                            "$id": "#not_a_real_anchor"
                        }
                    }
                },
                "if": {
                    "const": "skip not_a_real_anchor"
                },
                "then": true,
                "else" : {
                    "$ref": "#/definitions/const_not_anchor"
                }
            },
            "tests": [
                {
                    "description": "skip traversing definition for a valid result",
                    "data": "skip not_a_real_anchor",
                    "valid": true
                },
                {
                    "description": "const at const_not_anchor does not match",
                    "data": 1,
                    "valid": false
                }
            ]
        },
        {
            "description": "non-schema object containing an $id property",
            "schema": {
                "definitions": {
                    "const_not_id": {
                        "const": {
                            "$id": "not_a_real_id"
                        }
                    }
                },
                "if": {
                    "const": "skip not_a_real_id"
                },
                "then": true,
                "else" : {
                    "$ref": "#/definitions/const_not_id"
                }
            },
            "tests": [
                {
                    "description": "skip traversing definition for a valid result",
                    "data": "skip not_a_real_id",
                    "valid": true
                },
                {
                    "description": "const at const_not_id does not match",
                    "data": 1,
                    "valid": false
                }
            ]
        }
    ],
    "if-then-else": [
        {
            "description": "ignore if without then or else",
            "schema": {
                "if": {
                    "const": 0
                }
            },
            "tests": [
                {
                    "description": "valid when valid against lone if",
                    "data": 0,
                    "valid": true
                },
                {
                    "description": "valid when invalid against lone if",
                    "data": "hello",
                    "valid": true
                }
            ]
        },
        {
            "description": "ignore then without if",
            "schema": {
                "then": {
                    "const": 0
                }
            },
            "tests": [
                {
                    "description": "valid when valid against lone then",
                    "data": 0,
                    "valid": true
                },
                {
                    "description": "valid when invalid against lone then",
                    "data": "hello",
                    "valid": true
                }
            ]
        },
        {
            "description": "ignore else without if",
            "schema": {
                "else": {
                    "const": 0
                }
            },
            "tests": [
                {
                    "description": "valid when valid against lone else",
                    "data": 0,
                    "valid": true
                },
                {
                    "description": "valid when invalid against lone else",
                    "data": "hello",
                    "valid": true
                }
            ]
        },
        {
            "description": "if and then without else",
            "schema": {
                "if": {
                    "exclusiveMaximum": 0
                },
                "then": {
                    "minimum": -10
                }
            },
            "tests": [
                {
                    "description": "valid through then",
                    "data": -1,
                    "valid": true
                },
                {
                    "description": "invalid through then",
                    "data": -100,
                    "valid": false
                },
                {
                    "description": "valid when if test fails",
                    "data": 3,
                    "valid": true
                }
            ]
        },
        {
            "description": "if and else without then",
            "schema": {
                "if": {
                    "exclusiveMaximum": 0
                },
                "else": {
                    "multipleOf": 2
                }
            },
            "tests": [
                {
                    "description": "valid when if test passes",
                    "data": -1,
                    "valid": true
                },
                {
                    "description": "valid through else",
                    "data": 4,
                    "valid": true
                },
                {
                    "description": "invalid through else",
                    "data": 3,
                    "valid": false
                }
            ]
        },
        {
            "description": "validate against correct branch, then vs else",
            "schema": {
                "if": {
                    "exclusiveMaximum": 0
                },
                "then": {
                    "minimum": -10
                },
                "else": {
                    "multipleOf": 2
                }
            },
            "tests": [
                {
                    "description": "valid through then",
                    "data": -1,
                    "valid": true
                },
                {
                    "description": "invalid through then",
                    "data": -100,
                    "valid": false
                },
                {
                    "description": "valid through else",
                    "data": 4,
                    "valid": true
                },
                {
                    "description": "invalid through else",
                    "data": 3,
                    "valid": false
                }
            ]
        },
        {
            "description": "non-interference across combined schemas",
            "schema": {
                "allOf": [
                    {
                        "if": {
                            "exclusiveMaximum": 0
                        }
                    },
                    {
                        "then": {
                            "minimum": -10
                        }
                    },
                    {
                        "else": {
                            "multipleOf": 2
                        }
                    }
                ]
            },
            "tests": [
                {
                    "description": "valid, but would have been invalid through then",
                    "data": -100,
                    "valid": true
                },
                {
                    "description": "valid, but would have been invalid through else",
                    "data": 3,
                    "valid": true
                }
            ]
        },
        {
            "description": "if with boolean schema true",
            "schema": {
                "if": true,
                "then": { "const": "then" },
                "else": { "const": "else" }
            },
            "tests": [
                {
                    "description": "boolean schema true in if always chooses the then path (valid)",
                    "data": "then",
                    "valid": true
                },
                {
                    "description": "boolean schema true in if always chooses the then path (invalid)",
                    "data": "else",
                    "valid": false
                }
            ]
        },
        {
            "description": "if with boolean schema false",
            "schema": {
                "if": false,
                "then": { "const": "then" },
                "else": { "const": "else" }
            },
            "tests": [
                {
                    "description": "boolean schema false in if always chooses the else path (invalid)",
                    "data": "then",
                    "valid": false
                },
                {
                    "description": "boolean schema false in if always chooses the else path (valid)",
                    "data": "else",
                    "valid": true
                }
            ]
        },
        {
            "description": "if appears at the end when serialized (keyword processing sequence)",
            "schema": {
                "then": { "const": "yes" },
                "else": { "const": "other" },
                "if": { "maxLength": 4 }
            },
            "tests": [
                {
                    "description": "yes redirects to then and passes",
                    "data": "yes",
                    "valid": true
                },
                {
                    "description": "other redirects to else and passes",
                    "data": "other",
                    "valid": true
                },
                {
                    "description": "no redirects to then and fails",
                    "data": "no",
                    "valid": false
                },
                {
                    "description": "invalid redirects to else and fails",
                    "data": "invalid",
                    "valid": false
                }
            ]
        }
    ],
    "infinite-loop-recursion": [
        {
            "description": "evaluating the same schema location against the same data location twice is not a sign of an infinite loop",
            "schema": {
                "definitions": {
                    "int": { "type": "integer" }
                },
                "allOf": [
                    {
                        "properties": {
                            "foo": {
                                "$ref": "#/definitions/int"
                            }
                        }
                    },
                    {
                        "additionalProperties": {
                            "$ref": "#/definitions/int"
                        }
                    }
                ]
            },
            "tests": [
                {
                    "description": "passing case",
                    "data": { "foo": 1 },
                    "valid": true
                },
                {
                    "description": "failing case",
                    "data": { "foo": "a string" },
                    "valid": false
                }
            ]
        }
    ],
    "items": [
        {
            "description": "a schema given for items",
            "schema": {
                "items": {"type": "integer"}
            },
            "tests": [
                {
                    "description": "valid items",
                    "data": [ 1, 2, 3 ],
                    "valid": true
                },
                {
                    "description": "wrong type of items",
                    "data": [1, "x"],
                    "valid": false
                },
                {
                    "description": "ignores non-arrays",
                    "data": {"foo" : "bar"},
                    "valid": true
                },
                {
                    "description": "JavaScript pseudo-array is valid",
                    "data": {
                        "0": "invalid",
                        "length": 1
                    },
                    "valid": true
                }
            ]
        },
        {
            "description": "an array of schemas for items",
            "schema": {
                "items": [
                    {"type": "integer"},
                    {"type": "string"}
                ]
            },
            "tests": [
                {
                    "description": "correct types",
                    "data": [ 1, "foo" ],
                    "valid": true
                },
                {
                    "description": "wrong types",
                    "data": [ "foo", 1 ],
                    "valid": false
                },
                {
                    "description": "incomplete array of items",
                    "data": [ 1 ],
                    "valid": true
                },
                {
                    "description": "array with additional items",
                    "data": [ 1, "foo", true ],
                    "valid": true
                },
                {
                    "description": "empty array",
                    "data": [ ],
                    "valid": true
                },
                {
                    "description": "JavaScript pseudo-array is valid",
                    "data": {
                        "0": "invalid",
                        "1": "valid",
                        "length": 2
                    },
                    "valid": true
                }
            ]
        },
        {
            "description": "items with boolean schema (true)",
            "schema": {"items": true},
            "tests": [
                {
                    "description": "any array is valid",
                    "data": [ 1, "foo", true ],
                    "valid": true
                },
                {
                    "description": "empty array is valid",
                    "data": [],
                    "valid": true
                }
            ]
        },
        {
            "description": "items with boolean schema (false)",
            "schema": {"items": false},
            "tests": [
                {
                    "description": "any non-empty array is invalid",
                    "data": [ 1, "foo", true ],
                    "valid": false
                },
                {
                    "description": "empty array is valid",
                    "data": [],
                    "valid": true
                }
            ]
        },
        {
            "description": "items with boolean schemas",
            "schema": {
                "items": [true, false]
            },
            "tests": [
                {
                    "description": "array with one item is valid",
                    "data": [ 1 ],
                    "valid": true
                },
                {
                    "description": "array with two items is invalid",
                    "data": [ 1, "foo" ],
                    "valid": false
                },
                {
                    "description": "empty array is valid",
                    "data": [],
                    "valid": true
                }
            ]
        },
        {
            "description": "items and subitems",
            "schema": {
                "definitions": {
                    "item": {
                        "type": "array",
                        "additionalItems": false,
                        "items": [
                            { "$ref": "#/definitions/sub-item" },
                            { "$ref": "#/definitions/sub-item" }
                        ]
                    },
                    "sub-item": {
                        "type": "object",
                        "required": ["foo"]
                    }
                },
                "type": "array",
                "additionalItems": false,
                "items": [
                    { "$ref": "#/definitions/item" },
                    { "$ref": "#/definitions/item" },
                    { "$ref": "#/definitions/item" }
                ]
            },
            "tests": [
                {
                    "description": "valid items",
                    "data": [
                        [ {"foo": null}, {"foo": null} ],
                        [ {"foo": null}, {"foo": null} ],
                        [ {"foo": null}, {"foo": null} ]
                    ],
                    "valid": true
                },
                {
                    "description": "too many items",
                    "data": [
                        [ {"foo": null}, {"foo": null} ],
                        [ {"foo": null}, {"foo": null} ],
                        [ {"foo": null}, {"foo": null} ],
                        [ {"foo": null}, {"foo": null} ]
                    ],
                    "valid": false
                },
                {
                    "description": "too many sub-items",
                    "data": [
                        [ {"foo": null}, {"foo": null}, {"foo": null} ],
                        [ {"foo": null}, {"foo": null} ],
                        [ {"foo": null}, {"foo": null} ]
                    ],
                    "valid": false
                },
                {
                    "description": "wrong item",
                    "data": [
                        {"foo": null},
                        [ {"foo": null}, {"foo": null} ],
                        [ {"foo": null}, {"foo": null} ]
                    ],
                    "valid": false
                },
                {
                    "description": "wrong sub-item",
                    "data": [
                        [ {}, {"foo": null} ],
                        [ {"foo": null}, {"foo": null} ],
                        [ {"foo": null}, {"foo": null} ]
                    ],
                    "valid": false
                },
                {
                    "description": "fewer items is valid",
                    "data": [
                        [ {"foo": null} ],
                        [ {"foo": null} ]
                    ],
                    "valid": true
                }
            ]
        },
        {
            "description": "nested items",
            "schema": {
                "type": "array",
                "items": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "number"
                            }
                        }
                    }
                }
            },
            "tests": [
                {
                    "description": "valid nested array",
                    "data": [[[[1]], [[2],[3]]], [[[4], [5], [6]]]],
                    "valid": true
                },
                {
                    "description": "nested array with invalid type",
                    "data": [[[["1"]], [[2],[3]]], [[[4], [5], [6]]]],
                    "valid": false
                },
                {
                    "description": "not deep enough",
                    "data": [[[1], [2],[3]], [[4], [5], [6]]],
                    "valid": false
                }
            ]
        },
        {
            "description": "single-form items with null instance elements",
            "schema": {
                "items": {
                    "type": "null"
                }
            },
            "tests": [
                {
                    "description": "allows null elements",
                    "data": [ null ],
                    "valid": true
                }
            ]
        },
        {
            "description": "array-form items with null instance elements",
            "schema": {
                "items": [
                    {
                        "type": "null"
                    }
                ]
            },
            "tests": [
                {
                    "description": "allows null elements",
                    "data": [ null ],
                    "valid": true
                }
            ]
        }
    ],
    "maxItems": [
        {
            "description": "maxItems validation",
            "schema": {"maxItems": 2},
            "tests": [
                {
                    "description": "shorter is valid",
                    "data": [1],
                    "valid": true
                },
                {
                    "description": "exact length is valid",
                    "data": [1, 2],
                    "valid": true
                },
                {
                    "description": "too long is invalid",
                    "data": [1, 2, 3],
                    "valid": false
                },
                {
                    "description": "ignores non-arrays",
                    "data": "foobar",
                    "valid": true
                }
            ]
        },
        {
            "description": "maxItems validation with a decimal",
            "schema": {"maxItems": 2.0},
            "tests": [
                {
                    "description": "shorter is valid",
                    "data": [1],
                    "valid": true
                },
                {
                    "description": "too long is invalid",
                    "data": [1, 2, 3],
                    "valid": false
                }
            ]
        }
    ],
    "maxLength": [
        {
            "description": "maxLength validation",
            "schema": {"maxLength": 2},
            "tests": [
                {
                    "description": "shorter is valid",
                    "data": "f",
                    "valid": true
                },
                {
                    "description": "exact length is valid",
                    "data": "fo",
                    "valid": true
                },
                {
                    "description": "too long is invalid",
                    "data": "foo",
                    "valid": false
                },
                {
                    "description": "ignores non-strings",
                    "data": 100,
                    "valid": true
                },
                {
                    "description": "two supplementary Unicode code points is long enough",
                    "data": "\uD83D\uDCA9\uD83D\uDCA9",
                    "valid": true
                }
            ]
        },
        {
            "description": "maxLength validation with a decimal",
            "schema": {"maxLength": 2.0},
            "tests": [
                {
                    "description": "shorter is valid",
                    "data": "f",
                    "valid": true
                },
                {
                    "description": "too long is invalid",
                    "data": "foo",
                    "valid": false
                }
            ]
        }
    ],
    "maxProperties": [
        {
            "description": "maxProperties validation",
            "schema": {"maxProperties": 2},
            "tests": [
                {
                    "description": "shorter is valid",
                    "data": {"foo": 1},
                    "valid": true
                },
                {
                    "description": "exact length is valid",
                    "data": {"foo": 1, "bar": 2},
                    "valid": true
                },
                {
                    "description": "too long is invalid",
                    "data": {"foo": 1, "bar": 2, "baz": 3},
                    "valid": false
                },
                {
                    "description": "ignores arrays",
                    "data": [1, 2, 3],
                    "valid": true
                },
                {
                    "description": "ignores strings",
                    "data": "foobar",
                    "valid": true
                },
                {
                    "description": "ignores other non-objects",
                    "data": 12,
                    "valid": true
                }
            ]
        },
        {
            "description": "maxProperties validation with a decimal",
            "schema": {"maxProperties": 2.0},
            "tests": [
                {
                    "description": "shorter is valid",
                    "data": {"foo": 1},
                    "valid": true
                },
                {
                    "description": "too long is invalid",
                    "data": {"foo": 1, "bar": 2, "baz": 3},
                    "valid": false
                }
            ]
        },
        {
            "description": "maxProperties = 0 means the object is empty",
            "schema": { "maxProperties": 0 },
            "tests": [
                {
                    "description": "no properties is valid",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "one property is invalid",
                    "data": { "foo": 1 },
                    "valid": false
                }
            ]
        }
    ],
    "maximum": [
        {
            "description": "maximum validation",
            "schema": {"maximum": 3.0},
            "tests": [
                {
                    "description": "below the maximum is valid",
                    "data": 2.6,
                    "valid": true
                },
                {
                    "description": "boundary point is valid",
                    "data": 3.0,
                    "valid": true
                },
                {
                    "description": "above the maximum is invalid",
                    "data": 3.5,
                    "valid": false
                },
                {
                    "description": "ignores non-numbers",
                    "data": "x",
                    "valid": true
                }
            ]
        },
        {
            "description": "maximum validation with unsigned integer",
            "schema": {"maximum": 300},
            "tests":  [
                {
                    "description": "below the maximum is invalid",
                    "data": 299.97,
                    "valid": true
                },
                {
                    "description": "boundary point integer is valid",
                    "data": 300,
                    "valid": true
                },
                {
                    "description": "boundary point float is valid",
                    "data": 300.00,
                    "valid": true
                },
                {
                    "description": "above the maximum is invalid",
                    "data": 300.5,
                    "valid": false
                }
            ]
        }
    ],
    "minItems": [
        {
            "description": "minItems validation",
            "schema": {"minItems": 1},
            "tests": [
                {
                    "description": "longer is valid",
                    "data": [1, 2],
                    "valid": true
                },
                {
                    "description": "exact length is valid",
                    "data": [1],
                    "valid": true
                },
                {
                    "description": "too short is invalid",
                    "data": [],
                    "valid": false
                },
                {
                    "description": "ignores non-arrays",
                    "data": "",
                    "valid": true
                }
            ]
        },
        {
            "description": "minItems validation with a decimal",
            "schema": {"minItems": 1.0},
            "tests": [
                {
                    "description": "longer is valid",
                    "data": [1, 2],
                    "valid": true
                },
                {
                    "description": "too short is invalid",
                    "data": [],
                    "valid": false
                }
            ]
        }
    ],
    "minLength": [
        {
            "description": "minLength validation",
            "schema": {"minLength": 2},
            "tests": [
                {
                    "description": "longer is valid",
                    "data": "foo",
                    "valid": true
                },
                {
                    "description": "exact length is valid",
                    "data": "fo",
                    "valid": true
                },
                {
                    "description": "too short is invalid",
                    "data": "f",
                    "valid": false
                },
                {
                    "description": "ignores non-strings",
                    "data": 1,
                    "valid": true
                },
                {
                    "description": "one supplementary Unicode code point is not long enough",
                    "data": "\uD83D\uDCA9",
                    "valid": false
                }
            ]
        },
        {
            "description": "minLength validation with a decimal",
            "schema": {"minLength": 2.0},
            "tests": [
                {
                    "description": "longer is valid",
                    "data": "foo",
                    "valid": true
                },
                {
                    "description": "too short is invalid",
                    "data": "f",
                    "valid": false
                }
            ]
        }
    ],
    "minProperties": [
        {
            "description": "minProperties validation",
            "schema": {"minProperties": 1},
            "tests": [
                {
                    "description": "longer is valid",
                    "data": {"foo": 1, "bar": 2},
                    "valid": true
                },
                {
                    "description": "exact length is valid",
                    "data": {"foo": 1},
                    "valid": true
                },
                {
                    "description": "too short is invalid",
                    "data": {},
                    "valid": false
                },
                {
                    "description": "ignores arrays",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "ignores strings",
                    "data": "",
                    "valid": true
                },
                {
                    "description": "ignores other non-objects",
                    "data": 12,
                    "valid": true
                }
            ]
        },
        {
            "description": "minProperties validation with a decimal",
            "schema": {"minProperties": 1.0},
            "tests": [
                {
                    "description": "longer is valid",
                    "data": {"foo": 1, "bar": 2},
                    "valid": true
                },
                {
                    "description": "too short is invalid",
                    "data": {},
                    "valid": false
                }
            ]
        }
    ],
    "minimum": [
        {
            "description": "minimum validation",
            "schema": {"minimum": 1.1},
            "tests": [
                {
                    "description": "above the minimum is valid",
                    "data": 2.6,
                    "valid": true
                },
                {
                    "description": "boundary point is valid",
                    "data": 1.1,
                    "valid": true
                },
                {
                    "description": "below the minimum is invalid",
                    "data": 0.6,
                    "valid": false
                },
                {
                    "description": "ignores non-numbers",
                    "data": "x",
                    "valid": true
                }
            ]
        },
        {
            "description": "minimum validation with signed integer",
            "schema": {"minimum": -2},
            "tests": [
                {
                    "description": "negative above the minimum is valid",
                    "data": -1,
                    "valid": true
                },
                {
                    "description": "positive above the minimum is valid",
                    "data": 0,
                    "valid": true
                },
                {
                    "description": "boundary point is valid",
                    "data": -2,
                    "valid": true
                },
                {
                    "description": "boundary point with float is valid",
                    "data": -2.0,
                    "valid": true
                },
                {
                    "description": "float below the minimum is invalid",
                    "data": -2.0001,
                    "valid": false
                },
                {
                    "description": "int below the minimum is invalid",
                    "data": -3,
                    "valid": false
                },
                {
                    "description": "ignores non-numbers",
                    "data": "x",
                    "valid": true
                }
            ]
        }
    ],
    "multipleOf": [
        {
            "description": "by int",
            "schema": {"multipleOf": 2},
            "tests": [
                {
                    "description": "int by int",
                    "data": 10,
                    "valid": true
                },
                {
                    "description": "int by int fail",
                    "data": 7,
                    "valid": false
                },
                {
                    "description": "ignores non-numbers",
                    "data": "foo",
                    "valid": true
                }
            ]
        },
        {
            "description": "by number",
            "schema": {"multipleOf": 1.5},
            "tests": [
                {
                    "description": "zero is multiple of anything",
                    "data": 0,
                    "valid": true
                },
                {
                    "description": "4.5 is multiple of 1.5",
                    "data": 4.5,
                    "valid": true
                },
                {
                    "description": "35 is not multiple of 1.5",
                    "data": 35,
                    "valid": false
                }
            ]
        },
        {
            "description": "by small number",
            "schema": {"multipleOf": 0.0001},
            "tests": [
                {
                    "description": "0.0075 is multiple of 0.0001",
                    "data": 0.0075,
                    "valid": true
                },
                {
                    "description": "0.00751 is not multiple of 0.0001",
                    "data": 0.00751,
                    "valid": false
                }
            ]
        },
        {
            "description": "float division = inf",
            "schema": {"type": "integer", "multipleOf": 0.123456789},
            "tests": [
                {
                    "description": "always invalid, but naive implementations may raise an overflow error",
                    "data": 1e308,
                    "valid": false
                }
            ]
        },
        {
            "description": "small multiple of large integer",
            "schema": {"type": "integer", "multipleOf": 1e-8},
            "tests": [
                {
                    "description": "any integer is a multiple of 1e-8",
                    "data": 12391239123,
                    "valid": true
                }
            ]
        }
    ],
    "not": [
        {
            "description": "not",
            "schema": {
                "not": {"type": "integer"}
            },
            "tests": [
                {
                    "description": "allowed",
                    "data": "foo",
                    "valid": true
                },
                {
                    "description": "disallowed",
                    "data": 1,
                    "valid": false
                }
            ]
        },
        {
            "description": "not multiple types",
            "schema": {
                "not": {"type": ["integer", "boolean"]}
            },
            "tests": [
                {
                    "description": "valid",
                    "data": "foo",
                    "valid": true
                },
                {
                    "description": "mismatch",
                    "data": 1,
                    "valid": false
                },
                {
                    "description": "other mismatch",
                    "data": true,
                    "valid": false
                }
            ]
        },
        {
            "description": "not more complex schema",
            "schema": {
                "not": {
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    }
                 }
            },
            "tests": [
                {
                    "description": "match",
                    "data": 1,
                    "valid": true
                },
                {
                    "description": "other match",
                    "data": {"foo": 1},
                    "valid": true
                },
                {
                    "description": "mismatch",
                    "data": {"foo": "bar"},
                    "valid": false
                }
            ]
        },
        {
            "description": "forbidden property",
            "schema": {
                "properties": {
                    "foo": { 
                        "not": {}
                    }
                }
            },
            "tests": [
                {
                    "description": "property present",
                    "data": {"foo": 1, "bar": 2},
                    "valid": false
                },
                {
                    "description": "property absent",
                    "data": {"bar": 1, "baz": 2},
                    "valid": true
                }
            ]
        },
        {
            "description": "not with boolean schema true",
            "schema": {"not": true},
            "tests": [
                {
                    "description": "any value is invalid",
                    "data": "foo",
                    "valid": false
                }
            ]
        },
        {
            "description": "not with boolean schema false",
            "schema": {"not": false},
            "tests": [
                {
                    "description": "any value is valid",
                    "data": "foo",
                    "valid": true
                }
            ]
        }
    ],
    "oneOf": [
        {
            "description": "oneOf",
            "schema": {
                "oneOf": [
                    {
                        "type": "integer"
                    },
                    {
                        "minimum": 2
                    }
                ]
            },
            "tests": [
                {
                    "description": "first oneOf valid",
                    "data": 1,
                    "valid": true
                },
                {
                    "description": "second oneOf valid",
                    "data": 2.5,
                    "valid": true
                },
                {
                    "description": "both oneOf valid",
                    "data": 3,
                    "valid": false
                },
                {
                    "description": "neither oneOf valid",
                    "data": 1.5,
                    "valid": false
                }
            ]
        },
        {
            "description": "oneOf with base schema",
            "schema": {
                "type": "string",
                "oneOf" : [
                    {
                        "minLength": 2
                    },
                    {
                        "maxLength": 4
                    }
                ]
            },
            "tests": [
                {
                    "description": "mismatch base schema",
                    "data": 3,
                    "valid": false
                },
                {
                    "description": "one oneOf valid",
                    "data": "foobar",
                    "valid": true
                },
                {
                    "description": "both oneOf valid",
                    "data": "foo",
                    "valid": false
                }
            ]
        },
        {
            "description": "oneOf with boolean schemas, all true",
            "schema": {"oneOf": [true, true, true]},
            "tests": [
                {
                    "description": "any value is invalid",
                    "data": "foo",
                    "valid": false
                }
            ]
        },
        {
            "description": "oneOf with boolean schemas, one true",
            "schema": {"oneOf": [true, false, false]},
            "tests": [
                {
                    "description": "any value is valid",
                    "data": "foo",
                    "valid": true
                }
            ]
        },
        {
            "description": "oneOf with boolean schemas, more than one true",
            "schema": {"oneOf": [true, true, false]},
            "tests": [
                {
                    "description": "any value is invalid",
                    "data": "foo",
                    "valid": false
                }
            ]
        },
        {
            "description": "oneOf with boolean schemas, all false",
            "schema": {"oneOf": [false, false, false]},
            "tests": [
                {
                    "description": "any value is invalid",
                    "data": "foo",
                    "valid": false
                }
            ]
        },
        {
            "description": "oneOf complex types",
            "schema": {
                "oneOf": [
                    {
                        "properties": {
                            "bar": {"type": "integer"}
                        },
                        "required": ["bar"]
                    },
                    {
                        "properties": {
                            "foo": {"type": "string"}
                        },
                        "required": ["foo"]
                    }
                ]
            },
            "tests": [
                {
                    "description": "first oneOf valid (complex)",
                    "data": {"bar": 2},
                    "valid": true
                },
                {
                    "description": "second oneOf valid (complex)",
                    "data": {"foo": "baz"},
                    "valid": true
                },
                {
                    "description": "both oneOf valid (complex)",
                    "data": {"foo": "baz", "bar": 2},
                    "valid": false
                },
                {
                    "description": "neither oneOf valid (complex)",
                    "data": {"foo": 2, "bar": "quux"},
                    "valid": false
                }
            ]
        },
        {
            "description": "oneOf with empty schema",
            "schema": {
                "oneOf": [
                    { "type": "number" },
                    {}
                ]
            },
            "tests": [
                {
                    "description": "one valid - valid",
                    "data": "foo",
                    "valid": true
                },
                {
                    "description": "both valid - invalid",
                    "data": 123,
                    "valid": false
                }
            ]
        },
        {
            "description": "oneOf with required",
            "schema": {
                "type": "object",
                "oneOf": [
                    { "required": ["foo", "bar"] },
                    { "required": ["foo", "baz"] }
                ]
            },
            "tests": [
                {
                    "description": "both invalid - invalid",
                    "data": {"bar": 2},
                    "valid": false
                },
                {
                    "description": "first valid - valid",
                    "data": {"foo": 1, "bar": 2},
                    "valid": true
                },
                {
                    "description": "second valid - valid",
                    "data": {"foo": 1, "baz": 3},
                    "valid": true
                },
                {
                    "description": "both valid - invalid",
                    "data": {"foo": 1, "bar": 2, "baz" : 3},
                    "valid": false
                }
            ]
        },
        {
            "description": "oneOf with missing optional property",
            "schema": {
                "oneOf": [
                    {
                        "properties": {
                            "bar": true,
                            "baz": true
                        },
                        "required": ["bar"]
                    },
                    {
                        "properties": {
                            "foo": true
                        },
                        "required": ["foo"]
                    }
                ]
            },
            "tests": [
                {
                    "description": "first oneOf valid",
                    "data": {"bar": 8},
                    "valid": true
                },
                {
                    "description": "second oneOf valid",
                    "data": {"foo": "foo"},
                    "valid": true
                },
                {
                    "description": "both oneOf valid",
                    "data": {"foo": "foo", "bar": 8},
                    "valid": false
                },
                {
                    "description": "neither oneOf valid",
                    "data": {"baz": "quux"},
                    "valid": false
                }
            ]
        },
        {
            "description": "nested oneOf, to check validation semantics",
            "schema": {
                "oneOf": [
                    {
                        "oneOf": [
                            {
                                "type": "null"
                            }
                        ]
                    }
                ]
            },
            "tests": [
                {
                    "description": "null is valid",
                    "data": null,
                    "valid": true
                },
                {
                    "description": "anything non-null is invalid",
                    "data": 123,
                    "valid": false
                }
            ]
        }
    ],
    "pattern": [
        {
            "description": "pattern validation",
            "schema": {"pattern": "^a*$"},
            "tests": [
                {
                    "description": "a matching pattern is valid",
                    "data": "aaa",
                    "valid": true
                },
                {
                    "description": "a non-matching pattern is invalid",
                    "data": "abc",
                    "valid": false
                },
                {
                    "description": "ignores booleans",
                    "data": true,
                    "valid": true
                },
                {
                    "description": "ignores integers",
                    "data": 123,
                    "valid": true
                },
                {
                    "description": "ignores floats",
                    "data": 1.0,
                    "valid": true
                },
                {
                    "description": "ignores objects",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "ignores arrays",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "ignores null",
                    "data": null,
                    "valid": true
                }
            ]
        },
        {
            "description": "pattern is not anchored",
            "schema": {"pattern": "a+"},
            "tests": [
                {
                    "description": "matches a substring",
                    "data": "xxaayy",
                    "valid": true
                }
            ]
        }
    ],
    "patternProperties": [
        {
            "description":
                "patternProperties validates properties matching a regex",
            "schema": {
                "patternProperties": {
                    "f.*o": {"type": "integer"}
                }
            },
            "tests": [
                {
                    "description": "a single valid match is valid",
                    "data": {"foo": 1},
                    "valid": true
                },
                {
                    "description": "multiple valid matches is valid",
                    "data": {"foo": 1, "foooooo" : 2},
                    "valid": true
                },
                {
                    "description": "a single invalid match is invalid",
                    "data": {"foo": "bar", "fooooo": 2},
                    "valid": false
                },
                {
                    "description": "multiple invalid matches is invalid",
                    "data": {"foo": "bar", "foooooo" : "baz"},
                    "valid": false
                },
                {
                    "description": "ignores arrays",
                    "data": ["foo"],
                    "valid": true
                },
                {
                    "description": "ignores strings",
                    "data": "foo",
                    "valid": true
                },
                {
                    "description": "ignores other non-objects",
                    "data": 12,
                    "valid": true
                }
            ]
        },
        {
            "description": "multiple simultaneous patternProperties are validated",
            "schema": {
                "patternProperties": {
                    "a*": {"type": "integer"},
                    "aaa*": {"maximum": 20}
                }
            },
            "tests": [
                {
                    "description": "a single valid match is valid",
                    "data": {"a": 21},
                    "valid": true
                },
                {
                    "description": "a simultaneous match is valid",
                    "data": {"aaaa": 18},
                    "valid": true
                },
                {
                    "description": "multiple matches is valid",
                    "data": {"a": 21, "aaaa": 18},
                    "valid": true
                },
                {
                    "description": "an invalid due to one is invalid",
                    "data": {"a": "bar"},
                    "valid": false
                },
                {
                    "description": "an invalid due to the other is invalid",
                    "data": {"aaaa": 31},
                    "valid": false
                },
                {
                    "description": "an invalid due to both is invalid",
                    "data": {"aaa": "foo", "aaaa": 31},
                    "valid": false
                }
            ]
        },
        {
            "description": "regexes are not anchored by default and are case sensitive",
            "schema": {
                "patternProperties": {
                    "[0-9]{2,}": { "type": "boolean" },
                    "X_": { "type": "string" }
                }
            },
            "tests": [
                {
                    "description": "non recognized members are ignored",
                    "data": { "answer 1": "42" },
                    "valid": true
                },
                {
                    "description": "recognized members are accounted for",
                    "data": { "a31b": null },
                    "valid": false
                },
                {
                    "description": "regexes are case sensitive",
                    "data": { "a_x_3": 3 },
                    "valid": true
                },
                {
                    "description": "regexes are case sensitive, 2",
                    "data": { "a_X_3": 3 },
                    "valid": false
                }
            ]
        },
        {
            "description": "patternProperties with boolean schemas",
            "schema": {
                "patternProperties": {
                    "f.*": true,
                    "b.*": false
                }
            },
            "tests": [
                {
                    "description": "object with property matching schema true is valid",
                    "data": {"foo": 1},
                    "valid": true
                },
                {
                    "description": "object with property matching schema false is invalid",
                    "data": {"bar": 2},
                    "valid": false
                },
                {
                    "description": "object with both properties is invalid",
                    "data": {"foo": 1, "bar": 2},
                    "valid": false
                },
                {
                    "description": "object with a property matching both true and false is invalid",
                    "data": {"foobar":1},
                    "valid": false
                },
                {
                    "description": "empty object is valid",
                    "data": {},
                    "valid": true
                }
            ]
        },
        {
            "description": "patternProperties with null valued instance properties",
            "schema": {
                "patternProperties": {
                    "^.*bar$": {"type": "null"}
                }
            },
            "tests": [
                {
                    "description": "allows null values",
                    "data": {"foobar": null},
                    "valid": true
                }
            ]
        }
    ],
    "properties": [
        {
            "description": "object properties validation",
            "schema": {
                "properties": {
                    "foo": {"type": "integer"},
                    "bar": {"type": "string"}
                }
            },
            "tests": [
                {
                    "description": "both properties present and valid is valid",
                    "data": {"foo": 1, "bar": "baz"},
                    "valid": true
                },
                {
                    "description": "one property invalid is invalid",
                    "data": {"foo": 1, "bar": {}},
                    "valid": false
                },
                {
                    "description": "both properties invalid is invalid",
                    "data": {"foo": [], "bar": {}},
                    "valid": false
                },
                {
                    "description": "doesn't invalidate other properties",
                    "data": {"quux": []},
                    "valid": true
                },
                {
                    "description": "ignores arrays",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "ignores other non-objects",
                    "data": 12,
                    "valid": true
                }
            ]
        },
        {
            "description":
                "properties, patternProperties, additionalProperties interaction",
            "schema": {
                "properties": {
                    "foo": {"type": "array", "maxItems": 3},
                    "bar": {"type": "array"}
                },
                "patternProperties": {"f.o": {"minItems": 2}},
                "additionalProperties": {"type": "integer"}
            },
            "tests": [
                {
                    "description": "property validates property",
                    "data": {"foo": [1, 2]},
                    "valid": true
                },
                {
                    "description": "property invalidates property",
                    "data": {"foo": [1, 2, 3, 4]},
                    "valid": false
                },
                {
                    "description": "patternProperty invalidates property",
                    "data": {"foo": []},
                    "valid": false
                },
                {
                    "description": "patternProperty validates nonproperty",
                    "data": {"fxo": [1, 2]},
                    "valid": true
                },
                {
                    "description": "patternProperty invalidates nonproperty",
                    "data": {"fxo": []},
                    "valid": false
                },
                {
                    "description": "additionalProperty ignores property",
                    "data": {"bar": []},
                    "valid": true
                },
                {
                    "description": "additionalProperty validates others",
                    "data": {"quux": 3},
                    "valid": true
                },
                {
                    "description": "additionalProperty invalidates others",
                    "data": {"quux": "foo"},
                    "valid": false
                }
            ]
        },
        {
            "description": "properties with boolean schema",
            "schema": {
                "properties": {
                    "foo": true,
                    "bar": false
                }
            },
            "tests": [
                {
                    "description": "no property present is valid",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "only 'true' property present is valid",
                    "data": {"foo": 1},
                    "valid": true
                },
                {
                    "description": "only 'false' property present is invalid",
                    "data": {"bar": 2},
                    "valid": false
                },
                {
                    "description": "both properties present is invalid",
                    "data": {"foo": 1, "bar": 2},
                    "valid": false
                }
            ]
        },
        {
            "description": "properties with escaped characters",
            "schema": {
                "properties": {
                    "foo\nbar": {"type": "number"},
                    "foo\"bar": {"type": "number"},
                    "foo\\bar": {"type": "number"},
                    "foo\rbar": {"type": "number"},
                    "foo\tbar": {"type": "number"},
                    "foo\fbar": {"type": "number"}
                }
            },
            "tests": [
                {
                    "description": "object with all numbers is valid",
                    "data": {
                        "foo\nbar": 1,
                        "foo\"bar": 1,
                        "foo\\bar": 1,
                        "foo\rbar": 1,
                        "foo\tbar": 1,
                        "foo\fbar": 1
                    },
                    "valid": true
                },
                {
                    "description": "object with strings is invalid",
                    "data": {
                        "foo\nbar": "1",
                        "foo\"bar": "1",
                        "foo\\bar": "1",
                        "foo\rbar": "1",
                        "foo\tbar": "1",
                        "foo\fbar": "1"
                    },
                    "valid": false
                }
            ]
        },
        {
            "description": "properties with null valued instance properties",
            "schema": {
                "properties": {
                    "foo": {"type": "null"}
                }
            },
            "tests": [
                {
                    "description": "allows null values",
                    "data": {"foo": null},
                    "valid": true
                }
            ]
        },
        {
            "description": "properties whose names are Javascript object property names",
            "comment": "Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.",
            "schema": {
                "properties": {
                    "__proto__": {"type": "number"},
                    "toString": {
                        "properties": { "length": { "type": "string" } }
                    },
                    "constructor": {"type": "number"}
                }
            },
            "tests": [
                {
                    "description": "ignores arrays",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "ignores other non-objects",
                    "data": 12,
                    "valid": true
                },
                {
                    "description": "none of the properties mentioned",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "__proto__ not valid",
                    "data": { "__proto__": "foo" },
                    "valid": false
                },
                {
                    "description": "toString not valid",
                    "data": { "toString": { "length": 37 } },
                    "valid": false
                },
                {
                    "description": "constructor not valid",
                    "data": { "constructor": { "length": 37 } },
                    "valid": false
                },
                {
                    "description": "all present and valid",
                    "data": { 
                        "__proto__": 12,
                        "toString": { "length": "foo" },
                        "constructor": 37
                    },
                    "valid": true
                }
            ]
        }
    ],
    "propertyNames": [
        {
            "description": "propertyNames validation",
            "schema": {
                "propertyNames": {"maxLength": 3}
            },
            "tests": [
                {
                    "description": "all property names valid",
                    "data": {
                        "f": {},
                        "foo": {}
                    },
                    "valid": true
                },
                {
                    "description": "some property names invalid",
                    "data": {
                        "foo": {},
                        "foobar": {}
                    },
                    "valid": false
                },
                {
                    "description": "object without properties is valid",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "ignores arrays",
                    "data": [1, 2, 3, 4],
                    "valid": true
                },
                {
                    "description": "ignores strings",
                    "data": "foobar",
                    "valid": true
                },
                {
                    "description": "ignores other non-objects",
                    "data": 12,
                    "valid": true
                }
            ]
        },
        {
            "description": "propertyNames validation with pattern",
            "schema": {
                "propertyNames": { "pattern": "^a+$" }
            },
            "tests": [
                {
                    "description": "matching property names valid",
                    "data": {
                        "a": {},
                        "aa": {},
                        "aaa": {}
                    },
                    "valid": true
                },
                {
                    "description": "non-matching property name is invalid",
                    "data": {
                        "aaA": {}
                    },
                    "valid": false
                },
                {
                    "description": "object without properties is valid",
                    "data": {},
                    "valid": true
                }
            ]
        },
        {
            "description": "propertyNames with boolean schema true",
            "schema": {"propertyNames": true},
            "tests": [
                {
                    "description": "object with any properties is valid",
                    "data": {"foo": 1},
                    "valid": true
                },
                {
                    "description": "empty object is valid",
                    "data": {},
                    "valid": true
                }
            ]
        },
        {
            "description": "propertyNames with boolean schema false",
            "schema": {"propertyNames": false},
            "tests": [
                {
                    "description": "object with any properties is invalid",
                    "data": {"foo": 1},
                    "valid": false
                },
                {
                    "description": "empty object is valid",
                    "data": {},
                    "valid": true
                }
            ]
        }
    ],
    "ref": [
        {
            "description": "root pointer ref",
            "schema": {
                "properties": {
                    "foo": {"$ref": "#"}
                },
                "additionalProperties": false
            },
            "tests": [
                {
                    "description": "match",
                    "data": {"foo": false},
                    "valid": true
                },
                {
                    "description": "recursive match",
                    "data": {"foo": {"foo": false}},
                    "valid": true
                },
                {
                    "description": "mismatch",
                    "data": {"bar": false},
                    "valid": false
                },
                {
                    "description": "recursive mismatch",
                    "data": {"foo": {"bar": false}},
                    "valid": false
                }
            ]
        },
        {
            "description": "relative pointer ref to object",
            "schema": {
                "properties": {
                    "foo": {"type": "integer"},
                    "bar": {"$ref": "#/properties/foo"}
                }
            },
            "tests": [
                {
                    "description": "match",
                    "data": {"bar": 3},
                    "valid": true
                },
                {
                    "description": "mismatch",
                    "data": {"bar": true},
                    "valid": false
                }
            ]
        },
        {
            "description": "relative pointer ref to array",
            "schema": {
                "items": [
                    {"type": "integer"},
                    {"$ref": "#/items/0"}
                ]
            },
            "tests": [
                {
                    "description": "match array",
                    "data": [1, 2],
                    "valid": true
                },
                {
                    "description": "mismatch array",
                    "data": [1, "foo"],
                    "valid": false
                }
            ]
        },
        {
            "description": "escaped pointer ref",
            "schema": {
                "definitions": {
                    "tilde~field": {"type": "integer"},
                    "slash/field": {"type": "integer"},
                    "percent%field": {"type": "integer"}
                },
                "properties": {
                    "tilde": {"$ref": "#/definitions/tilde~0field"},
                    "slash": {"$ref": "#/definitions/slash~1field"},
                    "percent": {"$ref": "#/definitions/percent%25field"}
                }
            },
            "tests": [
                {
                    "description": "slash invalid",
                    "data": {"slash": "aoeu"},
                    "valid": false
                },
                {
                    "description": "tilde invalid",
                    "data": {"tilde": "aoeu"},
                    "valid": false
                },
                {
                    "description": "percent invalid",
                    "data": {"percent": "aoeu"},
                    "valid": false
                },
                {
                    "description": "slash valid",
                    "data": {"slash": 123},
                    "valid": true
                },
                {
                    "description": "tilde valid",
                    "data": {"tilde": 123},
                    "valid": true
                },
                {
                    "description": "percent valid",
                    "data": {"percent": 123},
                    "valid": true
                }
            ]
        },
        {
            "description": "nested refs",
            "schema": {
                "definitions": {
                    "a": {"type": "integer"},
                    "b": {"$ref": "#/definitions/a"},
                    "c": {"$ref": "#/definitions/b"}
                },
                "allOf": [{ "$ref": "#/definitions/c" }]
            },
            "tests": [
                {
                    "description": "nested ref valid",
                    "data": 5,
                    "valid": true
                },
                {
                    "description": "nested ref invalid",
                    "data": "a",
                    "valid": false
                }
            ]
        },
        {
            "description": "ref overrides any sibling keywords",
            "schema": {
                "definitions": {
                    "reffed": {
                        "type": "array"
                    }
                },
                "properties": {
                    "foo": {
                        "$ref": "#/definitions/reffed",
                        "maxItems": 2
                    }
                }
            },
            "tests": [
                {
                    "description": "ref valid",
                    "data": { "foo": [] },
                    "valid": true
                },
                {
                    "description": "ref valid, maxItems ignored",
                    "data": { "foo": [ 1, 2, 3] },
                    "valid": true
                },
                {
                    "description": "ref invalid",
                    "data": { "foo": "string" },
                    "valid": false
                }
            ]
        },
        {
            "description": "$ref prevents a sibling $id from changing the base uri",
            "schema": {
                "$id": "http://localhost:1234/sibling_id/base/",
                "definitions": {
                    "foo": {
                        "$id": "http://localhost:1234/sibling_id/foo.json",
                        "type": "string"
                    },
                    "base_foo": {
                        "$comment": "this canonical uri is http://localhost:1234/sibling_id/base/foo.json",
                        "$id": "foo.json",
                        "type": "number"
                    }
                },
                "allOf": [
                    {
                        "$comment": "$ref resolves to http://localhost:1234/sibling_id/base/foo.json, not http://localhost:1234/sibling_id/foo.json",
                        "$id": "http://localhost:1234/sibling_id/",
                        "$ref": "foo.json"
                    }
                ]
            },
            "tests": [
                {
                    "description": "$ref resolves to /definitions/base_foo, data does not validate",
                    "data": "a",
                    "valid": false
                },
                {
                    "description": "$ref resolves to /definitions/base_foo, data validates",
                    "data": 1,
                    "valid": true
                }
            ]
        },
        {
            "description": "remote ref, containing refs itself",
            "schema": {"$ref": "http://json-schema.org/draft-07/schema#"},
            "tests": [
                {
                    "description": "remote ref valid",
                    "data": {"minLength": 1},
                    "valid": true
                },
                {
                    "description": "remote ref invalid",
                    "data": {"minLength": -1},
                    "valid": false
                }
            ]
        },
        {
            "description": "property named $ref that is not a reference",
            "schema": {
                "properties": {
                    "$ref": {"type": "string"}
                }
            },
            "tests": [
                {
                    "description": "property named $ref valid",
                    "data": {"$ref": "a"},
                    "valid": true
                },
                {
                    "description": "property named $ref invalid",
                    "data": {"$ref": 2},
                    "valid": false
                }
            ]
        },
        {
            "description": "property named $ref, containing an actual $ref",
            "schema": {
                "properties": {
                    "$ref": {"$ref": "#/definitions/is-string"}
                },
                "definitions": {
                    "is-string": {
                        "type": "string"
                    }
                }
            },
            "tests": [
                {
                    "description": "property named $ref valid",
                    "data": {"$ref": "a"},
                    "valid": true
                },
                {
                    "description": "property named $ref invalid",
                    "data": {"$ref": 2},
                    "valid": false
                }
            ]
        },
        {
            "description": "$ref to boolean schema true",
            "schema": {
                "allOf": [{ "$ref": "#/definitions/bool" }],
                "definitions": {
                    "bool": true
                }
            },
            "tests": [
                {
                    "description": "any value is valid",
                    "data": "foo",
                    "valid": true
                }
            ]
        },
        {
            "description": "$ref to boolean schema false",
            "schema": {
                "allOf": [{ "$ref": "#/definitions/bool" }],
                "definitions": {
                    "bool": false
                }
            },
            "tests": [
                {
                    "description": "any value is invalid",
                    "data": "foo",
                    "valid": false
                }
            ]
        },
        {
            "description": "Recursive references between schemas",
            "schema": {
                "$id": "http://localhost:1234/tree",
                "description": "tree of nodes",
                "type": "object",
                "properties": {
                    "meta": {"type": "string"},
                    "nodes": {
                        "type": "array",
                        "items": {"$ref": "node"}
                    }
                },
                "required": ["meta", "nodes"],
                "definitions": {
                    "node": {
                        "$id": "http://localhost:1234/node",
                        "description": "node",
                        "type": "object",
                        "properties": {
                            "value": {"type": "number"},
                            "subtree": {"$ref": "tree"}
                        },
                        "required": ["value"]
                    }
                }
            },
            "tests": [
                {
                    "description": "valid tree",
                    "data": { 
                        "meta": "root",
                        "nodes": [
                            {
                                "value": 1,
                                "subtree": {
                                    "meta": "child",
                                    "nodes": [
                                        {"value": 1.1},
                                        {"value": 1.2}
                                    ]
                                }
                            },
                            {
                                "value": 2,
                                "subtree": {
                                    "meta": "child",
                                    "nodes": [
                                        {"value": 2.1},
                                        {"value": 2.2}
                                    ]
                                }
                            }
                        ]
                    },
                    "valid": true
                },
                {
                    "description": "invalid tree",
                    "data": { 
                        "meta": "root",
                        "nodes": [
                            {
                                "value": 1,
                                "subtree": {
                                    "meta": "child",
                                    "nodes": [
                                        {"value": "string is invalid"},
                                        {"value": 1.2}
                                    ]
                                }
                            },
                            {
                                "value": 2,
                                "subtree": {
                                    "meta": "child",
                                    "nodes": [
                                        {"value": 2.1},
                                        {"value": 2.2}
                                    ]
                                }
                            }
                        ]
                    },
                    "valid": false
                }
            ]
        },
        {
            "description": "refs with quote",
            "schema": {
                "properties": {
                    "foo\"bar": {"$ref": "#/definitions/foo%22bar"}
                },
                "definitions": {
                    "foo\"bar": {"type": "number"}
                }
            },
            "tests": [
                {
                    "description": "object with numbers is valid",
                    "data": {
                        "foo\"bar": 1
                    },
                    "valid": true
                },
                {
                    "description": "object with strings is invalid",
                    "data": {
                        "foo\"bar": "1"
                    },
                    "valid": false
                }
            ]
        },
        {
            "description": "Location-independent identifier",
            "schema": {
                "allOf": [{
                    "$ref": "#foo"
                }],
                "definitions": {
                    "A": {
                        "$id": "#foo",
                        "type": "integer"
                    }
                }
            },
            "tests": [
                {
                    "data": 1,
                    "description": "match",
                    "valid": true
                },
                {
                    "data": "a",
                    "description": "mismatch",
                    "valid": false
                }
            ]
        },
        {
            "description": "Reference an anchor with a non-relative URI",
            "schema": {
                "$id": "https://example.com/schema-with-anchor",
                "allOf": [{
                    "$ref": "https://example.com/schema-with-anchor#foo"
                }],
                "definitions": {
                    "A": {
                        "$id": "#foo",
                        "type": "integer"
                    }
                }
            },
            "tests": [
                {
                    "data": 1,
                    "description": "match",
                    "valid": true
                },
                {
                    "data": "a",
                    "description": "mismatch",
                    "valid": false
                }
            ]
        },
        {
            "description": "Location-independent identifier with base URI change in subschema",
            "schema": {
                "$id": "http://localhost:1234/root",
                "allOf": [{
                    "$ref": "http://localhost:1234/nested.json#foo"
                }],
                "definitions": {
                    "A": {
                        "$id": "nested.json",
                        "definitions": {
                            "B": {
                                "$id": "#foo",
                                "type": "integer"
                            }
                        }
                    }
                }
            },
            "tests": [
                {
                    "data": 1,
                    "description": "match",
                    "valid": true
                },
                {
                    "data": "a",
                    "description": "mismatch",
                    "valid": false
                }
            ]
        },
        {
            "description": "naive replacement of $ref with its destination is not correct",
            "schema": {
                "definitions": {
                    "a_string": { "type": "string" }
                },
                "enum": [
                    { "$ref": "#/definitions/a_string" }
                ]
            },
            "tests": [
                {
                    "description": "do not evaluate the $ref inside the enum, matching any string",
                    "data": "this is a string",
                    "valid": false
                },
                {
                    "description": "do not evaluate the $ref inside the enum, definition exact match",
                    "data": { "type": "string" },
                    "valid": false
                },
                {
                    "description": "match the enum exactly",
                    "data": { "$ref": "#/definitions/a_string" },
                    "valid": true
                }
            ]
        },
        {
            "description": "refs with relative uris and defs",
            "schema": {
                "$id": "http://example.com/schema-relative-uri-defs1.json",
                "properties": {
                    "foo": {
                        "$id": "schema-relative-uri-defs2.json",
                        "definitions": {
                            "inner": {
                                "properties": {
                                    "bar": { "type": "string" }
                                }
                            }
                        },
                        "allOf": [ { "$ref": "#/definitions/inner" } ]
                    }
                },
                "allOf": [ { "$ref": "schema-relative-uri-defs2.json" } ]
            },
            "tests": [
                {
                    "description": "invalid on inner field",
                    "data": {
                        "foo": {
                            "bar": 1
                        },
                        "bar": "a"
                    },
                    "valid": false
                },
                {
                    "description": "invalid on outer field",
                    "data": {
                        "foo": {
                            "bar": "a"
                        },
                        "bar": 1
                    },
                    "valid": false
                },
                {
                    "description": "valid on both fields",
                    "data": {
                        "foo": {
                            "bar": "a"
                        },
                        "bar": "a"
                    },
                    "valid": true
                }
            ]
        },
        {
            "description": "relative refs with absolute uris and defs",
            "schema": {
                "$id": "http://example.com/schema-refs-absolute-uris-defs1.json",
                "properties": {
                    "foo": {
                        "$id": "http://example.com/schema-refs-absolute-uris-defs2.json",
                        "definitions": {
                            "inner": {
                                "properties": {
                                    "bar": { "type": "string" }
                                }
                            }
                        },
                        "allOf": [ { "$ref": "#/definitions/inner" } ]
                    }
                },
                "allOf": [ { "$ref": "schema-refs-absolute-uris-defs2.json" } ]
            },
            "tests": [
                {
                    "description": "invalid on inner field",
                    "data": {
                        "foo": {
                            "bar": 1
                        },
                        "bar": "a"
                    },
                    "valid": false
                },
                {
                    "description": "invalid on outer field",
                    "data": {
                        "foo": {
                            "bar": "a"
                        },
                        "bar": 1
                    },
                    "valid": false
                },
                {
                    "description": "valid on both fields",
                    "data": {
                        "foo": {
                            "bar": "a"
                        },
                        "bar": "a"
                    },
                    "valid": true
                }
            ]
        },
        {
            "description": "$id must be resolved against nearest parent, not just immediate parent",
            "schema": {
                "$id": "http://example.com/a.json",
                "definitions": {
                    "x": {
                        "$id": "http://example.com/b/c.json",
                        "not": {
                            "definitions": {
                                "y": {
                                    "$id": "d.json",
                                    "type": "number"
                                }
                            }
                        }
                    }
                },
                "allOf": [
                    {
                        "$ref": "http://example.com/b/d.json"
                    }
                ]
            },
            "tests": [
                {
                    "description": "number is valid",
                    "data": 1,
                    "valid": true
                },
                {
                    "description": "non-number is invalid",
                    "data": "a",
                    "valid": false
                }
            ]
        },
        {
            "description": "simple URN base URI with $ref via the URN",
            "schema": {
                "$comment": "URIs do not have to have HTTP(s) schemes",
                "$id": "urn:uuid:deadbeef-1234-ffff-ffff-4321feebdaed",
                "minimum": 30,
                "properties": {
                    "foo": {"$ref": "urn:uuid:deadbeef-1234-ffff-ffff-4321feebdaed"}
                }
            },
            "tests": [
                {
                    "description": "valid under the URN IDed schema",
                    "data": {"foo": 37},
                    "valid": true
                },
                {
                    "description": "invalid under the URN IDed schema",
                    "data": {"foo": 12},
                    "valid": false
                }
            ]
        },
        {
            "description": "simple URN base URI with JSON pointer",
            "schema": {
                "$comment": "URIs do not have to have HTTP(s) schemes",
                "$id": "urn:uuid:deadbeef-1234-00ff-ff00-4321feebdaed",
                "properties": {
                    "foo": {"$ref": "#/definitions/bar"}
                },
                "definitions": {
                    "bar": {"type": "string"}
                }
            },
            "tests": [
                {
                    "description": "a string is valid",
                    "data": {"foo": "bar"},
                    "valid": true
                },
                {
                    "description": "a non-string is invalid",
                    "data": {"foo": 12},
                    "valid": false
                }
            ]
        },
        {
            "description": "URN base URI with NSS",
            "schema": {
                "$comment": "RFC 8141 §2.2",
                "$id": "urn:example:1/406/47452/2",
                "properties": {
                    "foo": {"$ref": "#/definitions/bar"}
                },
                "definitions": {
                    "bar": {"type": "string"}
                }
            },
            "tests": [
                {
                    "description": "a string is valid",
                    "data": {"foo": "bar"},
                    "valid": true
                },
                {
                    "description": "a non-string is invalid",
                    "data": {"foo": 12},
                    "valid": false
                }
            ]
        },
        {
            "description": "URN base URI with r-component",
            "schema": {
                "$comment": "RFC 8141 §2.3.1",
                "$id": "urn:example:foo-bar-baz-qux?+CCResolve:cc=uk",
                "properties": {
                    "foo": {"$ref": "#/definitions/bar"}
                },
                "definitions": {
                    "bar": {"type": "string"}
                }
            },
            "tests": [
                {
                    "description": "a string is valid",
                    "data": {"foo": "bar"},
                    "valid": true
                },
                {
                    "description": "a non-string is invalid",
                    "data": {"foo": 12},
                    "valid": false
                }
            ]
        },
        {
            "description": "URN base URI with q-component",
            "schema": {
                "$comment": "RFC 8141 §2.3.2",
                "$id": "urn:example:weather?=op=map&lat=39.56&lon=-104.85&datetime=1969-07-21T02:56:15Z",
                "properties": {
                    "foo": {"$ref": "#/definitions/bar"}
                },
                "definitions": {
                    "bar": {"type": "string"}
                }
            },
            "tests": [
                {
                    "description": "a string is valid",
                    "data": {"foo": "bar"},
                    "valid": true
                },
                {
                    "description": "a non-string is invalid",
                    "data": {"foo": 12},
                    "valid": false
                }
            ]
        },
        {
            "description": "URN base URI with URN and JSON pointer ref",
            "schema": {
                "$id": "urn:uuid:deadbeef-1234-0000-0000-4321feebdaed",
                "properties": {
                    "foo": {"$ref": "urn:uuid:deadbeef-1234-0000-0000-4321feebdaed#/definitions/bar"}
                },
                "definitions": {
                    "bar": {"type": "string"}
                }
            },
            "tests": [
                {
                    "description": "a string is valid",
                    "data": {"foo": "bar"},
                    "valid": true
                },
                {
                    "description": "a non-string is invalid",
                    "data": {"foo": 12},
                    "valid": false
                }
            ]
        },
        {
            "description": "URN base URI with URN and anchor ref",
            "schema": {
                "$id": "urn:uuid:deadbeef-1234-ff00-00ff-4321feebdaed",
                "properties": {
                    "foo": {"$ref": "urn:uuid:deadbeef-1234-ff00-00ff-4321feebdaed#something"}
                },
                "definitions": {
                    "bar": {
                        "$id": "#something",
                        "type": "string"
                    }
                }
            },
            "tests": [
                {
                    "description": "a string is valid",
                    "data": {"foo": "bar"},
                    "valid": true
                },
                {
                    "description": "a non-string is invalid",
                    "data": {"foo": 12},
                    "valid": false
                }
            ]
        },
        {
            "description": "ref to if",
            "schema": {
                "allOf": [
                    {"$ref": "http://example.com/ref/if"},
                    {
                        "if": {
                            "$id": "http://example.com/ref/if",
                            "type": "integer"
                        }
                    }
                ]
            },
            "tests": [
                {
                    "description": "a non-integer is invalid due to the $ref",
                    "data": "foo",
                    "valid": false
                },
                {
                    "description": "an integer is valid",
                    "data": 12,
                    "valid": true
                }
            ]
        },
        {
            "description": "ref to then",
            "schema": {
                "allOf": [
                    {"$ref": "http://example.com/ref/then"},
                    {
                        "then": {
                            "$id": "http://example.com/ref/then",
                            "type": "integer"
                        }
                    }
                ]
            },
            "tests": [
                {
                    "description": "a non-integer is invalid due to the $ref",
                    "data": "foo",
                    "valid": false
                },
                {
                    "description": "an integer is valid",
                    "data": 12,
                    "valid": true
                }
            ]
        },
        {
            "description": "ref to else",
            "schema": {
                "allOf": [
                    {"$ref": "http://example.com/ref/else"},
                    {
                        "else": {
                            "$id": "http://example.com/ref/else",
                            "type": "integer"
                        }
                    }
                ]
            },
            "tests": [
                {
                    "description": "a non-integer is invalid due to the $ref",
                    "data": "foo",
                    "valid": false
                },
                {
                    "description": "an integer is valid",
                    "data": 12,
                    "valid": true
                }
            ]
        },
        {
            "description": "ref with absolute-path-reference",
            "schema": {
                "$id": "http://example.com/ref/absref.json",
                "definitions": {
                    "a": {
                        "$id": "http://example.com/ref/absref/foobar.json",
                        "type": "number"
                     },
                     "b": {
                         "$id": "http://example.com/absref/foobar.json",
                         "type": "string"
                     }
                },
                "allOf": [
                    { "$ref": "/absref/foobar.json" }
                ]
            },
            "tests": [
                {
                    "description": "a string is valid",
                    "data": "foo",
                    "valid": true
                },
                {
                    "description": "an integer is invalid",
                    "data": 12,
                    "valid": false
                }
            ]
        },
        {
            "description": "$id with file URI still resolves pointers - *nix",
            "schema": {
                "$id": "file:///folder/file.json",
                "definitions": {
                    "foo": {
                        "type": "number"
                    }
                },
                "allOf": [
                    {
                        "$ref": "#/definitions/foo"
                    }
                ]
            },
            "tests": [
                {
                    "description": "number is valid",
                    "data": 1,
                    "valid": true
                },
                {
                    "description": "non-number is invalid",
                    "data": "a",
                    "valid": false
                }
            ]
        },
        {
            "description": "$id with file URI still resolves pointers - windows",
            "schema": {
                "$id": "file:///c:/folder/file.json",
                "definitions": {
                    "foo": {
                        "type": "number"
                    }
                },
                "allOf": [
                    {
                        "$ref": "#/definitions/foo"
                    }
                ]
            },
            "tests": [
                {
                    "description": "number is valid",
                    "data": 1,
                    "valid": true
                },
                {
                    "description": "non-number is invalid",
                    "data": "a",
                    "valid": false
                }
            ]
        },
        {
            "description": "empty tokens in $ref json-pointer",
            "schema": {
                "definitions": {
                    "": {
                        "definitions": {
                            "": { "type": "number" }
                        }
                    } 
                },
                "allOf": [
                    {
                        "$ref": "#/definitions//definitions/"
                    }
                ]
            },
            "tests": [
                {
                    "description": "number is valid",
                    "data": 1,
                    "valid": true
                },
                {
                    "description": "non-number is invalid",
                    "data": "a",
                    "valid": false
                }
            ]
        }
    ],
    "refRemote": [
        {
            "description": "remote ref",
            "schema": {"$ref": "http://localhost:1234/integer.json"},
            "tests": [
                {
                    "description": "remote ref valid",
                    "data": 1,
                    "valid": true
                },
                {
                    "description": "remote ref invalid",
                    "data": "a",
                    "valid": false
                }
            ]
        },
        {
            "description": "fragment within remote ref",
            "schema": {"$ref": "http://localhost:1234/subSchemas.json#/integer"},
            "tests": [
                {
                    "description": "remote fragment valid",
                    "data": 1,
                    "valid": true
                },
                {
                    "description": "remote fragment invalid",
                    "data": "a",
                    "valid": false
                }
            ]
        },
        {
            "description": "ref within remote ref",
            "schema": {
                "$ref": "http://localhost:1234/subSchemas.json#/refToInteger"
            },
            "tests": [
                {
                    "description": "ref within ref valid",
                    "data": 1,
                    "valid": true
                },
                {
                    "description": "ref within ref invalid",
                    "data": "a",
                    "valid": false
                }
            ]
        },
        {
            "description": "base URI change",
            "schema": {
                "$id": "http://localhost:1234/",
                "items": {
                    "$id": "baseUriChange/",
                    "items": {"$ref": "folderInteger.json"}
                }
            },
            "tests": [
                {
                    "description": "base URI change ref valid",
                    "data": [[1]],
                    "valid": true
                },
                {
                    "description": "base URI change ref invalid",
                    "data": [["a"]],
                    "valid": false
                }
            ]
        },
        {
            "description": "base URI change - change folder",
            "schema": {
                "$id": "http://localhost:1234/scope_change_defs1.json",
                "type" : "object",
                "properties": {
                    "list": {"$ref": "#/definitions/baz"}
                },
                "definitions": {
                    "baz": {
                        "$id": "baseUriChangeFolder/",
                        "type": "array",
                        "items": {"$ref": "folderInteger.json"}
                    }
                }
            },
            "tests": [
                {
                    "description": "number is valid",
                    "data": {"list": [1]},
                    "valid": true
                },
                {
                    "description": "string is invalid",
                    "data": {"list": ["a"]},
                    "valid": false
                }
            ]
        },
        {
            "description": "base URI change - change folder in subschema",
            "schema": {
                "$id": "http://localhost:1234/scope_change_defs2.json",
                "type" : "object",
                "properties": {
                    "list": {"$ref": "#/definitions/baz/definitions/bar"}
                },
                "definitions": {
                    "baz": {
                        "$id": "baseUriChangeFolderInSubschema/",
                        "definitions": {
                            "bar": {
                                "type": "array",
                                "items": {"$ref": "folderInteger.json"}
                            }
                        }
                    }
                }
            },
            "tests": [
                {
                    "description": "number is valid",
                    "data": {"list": [1]},
                    "valid": true
                },
                {
                    "description": "string is invalid",
                    "data": {"list": ["a"]},
                    "valid": false
                }
            ]
        },
        {
            "description": "root ref in remote ref",
            "schema": {
                "$id": "http://localhost:1234/object",
                "type": "object",
                "properties": {
                    "name": {"$ref": "name.json#/definitions/orNull"}
                }
            },
            "tests": [
                {
                    "description": "string is valid",
                    "data": {
                        "name": "foo"
                    },
                    "valid": true
                },
                {
                    "description": "null is valid",
                    "data": {
                        "name": null
                    },
                    "valid": true
                },
                {
                    "description": "object is invalid",
                    "data": {
                        "name": {
                            "name": null
                        }
                    },
                    "valid": false
                }
            ]
        },
        {
            "description": "remote ref with ref to definitions",
            "schema": {
                "$id": "http://localhost:1234/schema-remote-ref-ref-defs1.json",
                "allOf": [
                    { "$ref": "ref-and-definitions.json" }
                ]
            },
            "tests": [
                {
                    "description": "invalid",
                    "data": {
                        "bar": 1
                    },
                    "valid": false
                },
                {
                    "description": "valid",
                    "data": {
                        "bar": "a"
                    },
                    "valid": true
                }
            ]
        },
        {
            "description": "Location-independent identifier in remote ref",
            "schema": {
                "$ref": "http://localhost:1234/locationIndependentIdentifierPre2019.json#/definitions/refToInteger"
            },
            "tests": [
                {
                    "description": "integer is valid",
                    "data": 1,
                    "valid": true
                },
                {
                    "description": "string is invalid",
                    "data": "foo",
                    "valid": false
                }
            ]
        },
        {
            "description": "retrieved nested refs resolve relative to their URI not $id",
            "schema": {
                "$id": "http://localhost:1234/some-id",
                "properties": {
                    "name": {"$ref": "nested/foo-ref-string.json"}
                }
            },
            "tests": [
                {
                    "description": "number is invalid",
                    "data": {
                        "name": {"foo":  1}
                    },
                    "valid": false
                },
                {
                    "description": "string is valid",
                    "data": {
                        "name": {"foo":  "a"}
                    },
                    "valid": true
                }
            ]
        },
        {
            "description": "$ref to $ref finds location-independent $id",
            "schema": {
                "$ref": "http://localhost:1234/draft7/detached-ref.json#/definitions/foo"
            },
            "tests": [
                {
                    "description": "number is valid",
                    "data": 1,
                    "valid": true
                },
                {
                    "description": "non-number is invalid",
                    "data": "a",
                    "valid": false
                }
            ]
        }
    ],
    "required": [
        {
            "description": "required validation",
            "schema": {
                "properties": {
                    "foo": {},
                    "bar": {}
                },
                "required": ["foo"]
            },
            "tests": [
                {
                    "description": "present required property is valid",
                    "data": {"foo": 1},
                    "valid": true
                },
                {
                    "description": "non-present required property is invalid",
                    "data": {"bar": 1},
                    "valid": false
                },
                {
                    "description": "ignores arrays",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "ignores strings",
                    "data": "",
                    "valid": true
                },
                {
                    "description": "ignores other non-objects",
                    "data": 12,
                    "valid": true
                }
            ]
        },
        {
            "description": "required default validation",
            "schema": {
                "properties": {
                    "foo": {}
                }
            },
            "tests": [
                {
                    "description": "not required by default",
                    "data": {},
                    "valid": true
                }
            ]
        },
        {
            "description": "required with empty array",
            "schema": {
                "properties": {
                    "foo": {}
                },
                "required": []
            },
            "tests": [
                {
                    "description": "property not required",
                    "data": {},
                    "valid": true
                }
            ]
        },
        {
            "description": "required with escaped characters",
            "schema": {
                "required": [
                    "foo\nbar",
                    "foo\"bar",
                    "foo\\bar",
                    "foo\rbar",
                    "foo\tbar",
                    "foo\fbar"
                ]
            },
            "tests": [
                {
                    "description": "object with all properties present is valid",
                    "data": {
                        "foo\nbar": 1,
                        "foo\"bar": 1,
                        "foo\\bar": 1,
                        "foo\rbar": 1,
                        "foo\tbar": 1,
                        "foo\fbar": 1
                    },
                    "valid": true
                },
                {
                    "description": "object with some properties missing is invalid",
                    "data": {
                        "foo\nbar": "1",
                        "foo\"bar": "1"
                    },
                    "valid": false
                }
            ]
        },
        {
            "description": "required properties whose names are Javascript object property names",
            "comment": "Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.",
            "schema": { "required": ["__proto__", "toString", "constructor"] },
            "tests": [
                {
                    "description": "ignores arrays",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "ignores other non-objects",
                    "data": 12,
                    "valid": true
                },
                {
                    "description": "none of the properties mentioned",
                    "data": {},
                    "valid": false
                },
                {
                    "description": "__proto__ present",
                    "data": { "__proto__": "foo" },
                    "valid": false
                },
                {
                    "description": "toString present",
                    "data": { "toString": { "length": 37 } },
                    "valid": false
                },
                {
                    "description": "constructor present",
                    "data": { "constructor": { "length": 37 } },
                    "valid": false
                },
                {
                    "description": "all present",
                    "data": { 
                        "__proto__": 12,
                        "toString": { "length": "foo" },
                        "constructor": 37
                    },
                    "valid": true
                }
            ]
        }
    ],
    "type": [
        {
            "description": "integer type matches integers",
            "schema": {"type": "integer"},
            "tests": [
                {
                    "description": "an integer is an integer",
                    "data": 1,
                    "valid": true
                },
                {
                    "description": "a float with zero fractional part is an integer",
                    "data": 1.0,
                    "valid": true
                },
                {
                    "description": "a float is not an integer",
                    "data": 1.1,
                    "valid": false
                },
                {
                    "description": "a string is not an integer",
                    "data": "foo",
                    "valid": false
                },
                {
                    "description": "a string is still not an integer, even if it looks like one",
                    "data": "1",
                    "valid": false
                },
                {
                    "description": "an object is not an integer",
                    "data": {},
                    "valid": false
                },
                {
                    "description": "an array is not an integer",
                    "data": [],
                    "valid": false
                },
                {
                    "description": "a boolean is not an integer",
                    "data": true,
                    "valid": false
                },
                {
                    "description": "null is not an integer",
                    "data": null,
                    "valid": false
                }
            ]
        },
        {
            "description": "number type matches numbers",
            "schema": {"type": "number"},
            "tests": [
                {
                    "description": "an integer is a number",
                    "data": 1,
                    "valid": true
                },
                {
                    "description": "a float with zero fractional part is a number (and an integer)",
                    "data": 1.0,
                    "valid": true
                },
                {
                    "description": "a float is a number",
                    "data": 1.1,
                    "valid": true
                },
                {
                    "description": "a string is not a number",
                    "data": "foo",
                    "valid": false
                },
                {
                    "description": "a string is still not a number, even if it looks like one",
                    "data": "1",
                    "valid": false
                },
                {
                    "description": "an object is not a number",
                    "data": {},
                    "valid": false
                },
                {
                    "description": "an array is not a number",
                    "data": [],
                    "valid": false
                },
                {
                    "description": "a boolean is not a number",
                    "data": true,
                    "valid": false
                },
                {
                    "description": "null is not a number",
                    "data": null,
                    "valid": false
                }
            ]
        },
        {
            "description": "string type matches strings",
            "schema": {"type": "string"},
            "tests": [
                {
                    "description": "1 is not a string",
                    "data": 1,
                    "valid": false
                },
                {
                    "description": "a float is not a string",
                    "data": 1.1,
                    "valid": false
                },
                {
                    "description": "a string is a string",
                    "data": "foo",
                    "valid": true
                },
                {
                    "description": "a string is still a string, even if it looks like a number",
                    "data": "1",
                    "valid": true
                },
                {
                    "description": "an empty string is still a string",
                    "data": "",
                    "valid": true
                },
                {
                    "description": "an object is not a string",
                    "data": {},
                    "valid": false
                },
                {
                    "description": "an array is not a string",
                    "data": [],
                    "valid": false
                },
                {
                    "description": "a boolean is not a string",
                    "data": true,
                    "valid": false
                },
                {
                    "description": "null is not a string",
                    "data": null,
                    "valid": false
                }
            ]
        },
        {
            "description": "object type matches objects",
            "schema": {"type": "object"},
            "tests": [
                {
                    "description": "an integer is not an object",
                    "data": 1,
                    "valid": false
                },
                {
                    "description": "a float is not an object",
                    "data": 1.1,
                    "valid": false
                },
                {
                    "description": "a string is not an object",
                    "data": "foo",
                    "valid": false
                },
                {
                    "description": "an object is an object",
                    "data": {},
                    "valid": true
                },
                {
                    "description": "an array is not an object",
                    "data": [],
                    "valid": false
                },
                {
                    "description": "a boolean is not an object",
                    "data": true,
                    "valid": false
                },
                {
                    "description": "null is not an object",
                    "data": null,
                    "valid": false
                }
            ]
        },
        {
            "description": "array type matches arrays",
            "schema": {"type": "array"},
            "tests": [
                {
                    "description": "an integer is not an array",
                    "data": 1,
                    "valid": false
                },
                {
                    "description": "a float is not an array",
                    "data": 1.1,
                    "valid": false
                },
                {
                    "description": "a string is not an array",
                    "data": "foo",
                    "valid": false
                },
                {
                    "description": "an object is not an array",
                    "data": {},
                    "valid": false
                },
                {
                    "description": "an array is an array",
                    "data": [],
                    "valid": true
                },
                {
                    "description": "a boolean is not an array",
                    "data": true,
                    "valid": false
                },
                {
                    "description": "null is not an array",
                    "data": null,
                    "valid": false
                }
            ]
        },
        {
            "description": "boolean type matches booleans",
            "schema": {"type": "boolean"},
            "tests": [
                {
                    "description": "an integer is not a boolean",
                    "data": 1,
                    "valid": false
                },
                {
                    "description": "zero is not a boolean",
                    "data": 0,
                    "valid": false
                },
                {
                    "description": "a float is not a boolean",
                    "data": 1.1,
                    "valid": false
                },
                {
                    "description": "a string is not a boolean",
                    "data": "foo",
                    "valid": false
                },
                {
                    "description": "an empty string is not a boolean",
                    "data": "",
                    "valid": false
                },
                {
                    "description": "an object is not a boolean",
                    "data": {},
                    "valid": false
                },
                {
                    "description": "an array is not a boolean",
                    "data": [],
                    "valid": false
                },
                {
                    "description": "true is a boolean",
                    "data": true,
                    "valid": true
                },
                {
                    "description": "false is a boolean",
                    "data": false,
                    "valid": true
                },
                {
                    "description": "null is not a boolean",
                    "data": null,
                    "valid": false
                }
            ]
        },
        {
            "description": "null type matches only the null object",
            "schema": {"type": "null"},
            "tests": [
                {
                    "description": "an integer is not null",
                    "data": 1,
                    "valid": false
                },
                {
                    "description": "a float is not null",
                    "data": 1.1,
                    "valid": false
                },
                {
                    "description": "zero is not null",
                    "data": 0,
                    "valid": false
                },
                {
                    "description": "a string is not null",
                    "data": "foo",
                    "valid": false
                },
                {
                    "description": "an empty string is not null",
                    "data": "",
                    "valid": false
                },
                {
                    "description": "an object is not null",
                    "data": {},
                    "valid": false
                },
                {
                    "description": "an array is not null",
                    "data": [],
                    "valid": false
                },
                {
                    "description": "true is not null",
                    "data": true,
                    "valid": false
                },
                {
                    "description": "false is not null",
                    "data": false,
                    "valid": false
                },
                {
                    "description": "null is null",
                    "data": null,
                    "valid": true
                }
            ]
        },
        {
            "description": "multiple types can be specified in an array",
            "schema": {"type": ["integer", "string"]},
            "tests": [
                {
                    "description": "an integer is valid",
                    "data": 1,
                    "valid": true
                },
                {
                    "description": "a string is valid",
                    "data": "foo",
                    "valid": true
                },
                {
                    "description": "a float is invalid",
                    "data": 1.1,
                    "valid": false
                },
                {
                    "description": "an object is invalid",
                    "data": {},
                    "valid": false
                },
                {
                    "description": "an array is invalid",
                    "data": [],
                    "valid": false
                },
                {
                    "description": "a boolean is invalid",
                    "data": true,
                    "valid": false
                },
                {
                    "description": "null is invalid",
                    "data": null,
                    "valid": false
                }
            ]
        },
        {
            "description": "type as array with one item",
            "schema": {
                "type": ["string"]
            },
            "tests": [
                {
                    "description": "string is valid",
                    "data": "foo",
                    "valid": true
                },
                {
                    "description": "number is invalid",
                    "data": 123,
                    "valid": false
                }
            ]
        },
        {
            "description": "type: array or object",
            "schema": {
                "type": ["array", "object"]
            },
            "tests": [
                {
                    "description": "array is valid",
                    "data": [1,2,3],
                    "valid": true
                },
                {
                    "description": "object is valid",
                    "data": {"foo": 123},
                    "valid": true
                },
                {
                    "description": "number is invalid",
                    "data": 123,
                    "valid": false
                },
                {
                    "description": "string is invalid",
                    "data": "foo",
                    "valid": false
                },
                {
                    "description": "null is invalid",
                    "data": null,
                    "valid": false
                }
            ]
        },
        {
            "description": "type: array, object or null",
            "schema": {
                "type": ["array", "object", "null"]
            },
            "tests": [
                {
                    "description": "array is valid",
                    "data": [1,2,3],
                    "valid": true
                },
                {
                    "description": "object is valid",
                    "data": {"foo": 123},
                    "valid": true
                },
                {
                    "description": "null is valid",
                    "data": null,
                    "valid": true
                },
                {
                    "description": "number is invalid",
                    "data": 123,
                    "valid": false
                },
                {
                    "description": "string is invalid",
                    "data": "foo",
                    "valid": false
                }
            ]
        }
    ],
    "uniqueItems": [
        {
            "description": "uniqueItems validation",
            "schema": {"uniqueItems": true},
            "tests": [
                {
                    "description": "unique array of integers is valid",
                    "data": [1, 2],
                    "valid": true
                },
                {
                    "description": "non-unique array of integers is invalid",
                    "data": [1, 1],
                    "valid": false
                },
                {
                    "description": "non-unique array of more than two integers is invalid",
                    "data": [1, 2, 1],
                    "valid": false
                },
                {
                    "description": "numbers are unique if mathematically unequal",
                    "data": [1.0, 1.00, 1],
                    "valid": false
                },
                {
                    "description": "false is not equal to zero",
                    "data": [0, false],
                    "valid": true
                },
                {
                    "description": "true is not equal to one",
                    "data": [1, true],
                    "valid": true
                },
                {
                    "description": "unique array of strings is valid",
                    "data": ["foo", "bar", "baz"],
                    "valid": true
                },
                {
                    "description": "non-unique array of strings is invalid",
                    "data": ["foo", "bar", "foo"],
                    "valid": false
                },
                {
                    "description": "unique array of objects is valid",
                    "data": [{"foo": "bar"}, {"foo": "baz"}],
                    "valid": true
                },
                {
                    "description": "non-unique array of objects is invalid",
                    "data": [{"foo": "bar"}, {"foo": "bar"}],
                    "valid": false
                },
                {
                    "description": "property order of array of objects is ignored",
                    "data": [{"foo": "bar", "bar": "foo"}, {"bar": "foo", "foo": "bar"}],
                    "valid": false
                },
                {
                    "description": "unique array of nested objects is valid",
                    "data": [
                        {"foo": {"bar" : {"baz" : true}}},
                        {"foo": {"bar" : {"baz" : false}}}
                    ],
                    "valid": true
                },
                {
                    "description": "non-unique array of nested objects is invalid",
                    "data": [
                        {"foo": {"bar" : {"baz" : true}}},
                        {"foo": {"bar" : {"baz" : true}}}
                    ],
                    "valid": false
                },
                {
                    "description": "unique array of arrays is valid",
                    "data": [["foo"], ["bar"]],
                    "valid": true
                },
                {
                    "description": "non-unique array of arrays is invalid",
                    "data": [["foo"], ["foo"]],
                    "valid": false
                },
                {
                    "description": "non-unique array of more than two arrays is invalid",
                    "data": [["foo"], ["bar"], ["foo"]],
                    "valid": false
                },
                {
                    "description": "1 and true are unique",
                    "data": [1, true],
                    "valid": true
                },
                {
                    "description": "0 and false are unique",
                    "data": [0, false],
                    "valid": true
                },
                {
                    "description": "[1] and [true] are unique",
                    "data": [[1], [true]],
                    "valid": true
                },
                {
                    "description": "[0] and [false] are unique",
                    "data": [[0], [false]],
                    "valid": true
                },
                {
                    "description": "nested [1] and [true] are unique",
                    "data": [[[1], "foo"], [[true], "foo"]],
                    "valid": true
                },
                {
                    "description": "nested [0] and [false] are unique",
                    "data": [[[0], "foo"], [[false], "foo"]],
                    "valid": true
                },
                {
                    "description": "unique heterogeneous types are valid",
                    "data": [{}, [1], true, null, 1, "{}"],
                    "valid": true
                },
                {
                    "description": "non-unique heterogeneous types are invalid",
                    "data": [{}, [1], true, null, {}, 1],
                    "valid": false
                },
                {
                    "description": "different objects are unique",
                    "data": [{"a": 1, "b": 2}, {"a": 2, "b": 1}],
                    "valid": true
                },
                {
                    "description": "objects are non-unique despite key order",
                    "data": [{"a": 1, "b": 2}, {"b": 2, "a": 1}],
                    "valid": false
                },
                {
                    "description": "{\"a\": false} and {\"a\": 0} are unique",
                    "data": [{"a": false}, {"a": 0}],
                    "valid": true
                },
                {
                    "description": "{\"a\": true} and {\"a\": 1} are unique",
                    "data": [{"a": true}, {"a": 1}],
                    "valid": true
                }
            ]
        },
        {
            "description": "uniqueItems with an array of items",
            "schema": {
                "items": [{"type": "boolean"}, {"type": "boolean"}],
                "uniqueItems": true
            },
            "tests": [
                {
                    "description": "[false, true] from items array is valid",
                    "data": [false, true],
                    "valid": true
                },
                {
                    "description": "[true, false] from items array is valid",
                    "data": [true, false],
                    "valid": true
                },
                {
                    "description": "[false, false] from items array is not valid",
                    "data": [false, false],
                    "valid": false
                },
                {
                    "description": "[true, true] from items array is not valid",
                    "data": [true, true],
                    "valid": false
                },
                {
                    "description": "unique array extended from [false, true] is valid",
                    "data": [false, true, "foo", "bar"],
                    "valid": true
                },
                {
                    "description": "unique array extended from [true, false] is valid",
                    "data": [true, false, "foo", "bar"],
                    "valid": true
                },
                {
                    "description": "non-unique array extended from [false, true] is not valid",
                    "data": [false, true, "foo", "foo"],
                    "valid": false
                },
                {
                    "description": "non-unique array extended from [true, false] is not valid",
                    "data": [true, false, "foo", "foo"],
                    "valid": false
                }
            ]
        },
        {
            "description": "uniqueItems with an array of items and additionalItems=false",
            "schema": {
                "items": [{"type": "boolean"}, {"type": "boolean"}],
                "uniqueItems": true,
                "additionalItems": false
            },
            "tests": [
                {
                    "description": "[false, true] from items array is valid",
                    "data": [false, true],
                    "valid": true
                },
                {
                    "description": "[true, false] from items array is valid",
                    "data": [true, false],
                    "valid": true
                },
                {
                    "description": "[false, false] from items array is not valid",
                    "data": [false, false],
                    "valid": false
                },
                {
                    "description": "[true, true] from items array is not valid",
                    "data": [true, true],
                    "valid": false
                },
                {
                    "description": "extra items are invalid even if unique",
                    "data": [false, true, null],
                    "valid": false
                }
            ]
        },
        {
            "description": "uniqueItems=false validation",
            "schema": { "uniqueItems": false },
            "tests": [
                {
                    "description": "unique array of integers is valid",
                    "data": [1, 2],
                    "valid": true
                },
                {
                    "description": "non-unique array of integers is valid",
                    "data": [1, 1],
                    "valid": true
                },
                {
                    "description": "numbers are unique if mathematically unequal",
                    "data": [1.0, 1.00, 1],
                    "valid": true
                },
                {
                    "description": "false is not equal to zero",
                    "data": [0, false],
                    "valid": true
                },
                {
                    "description": "true is not equal to one",
                    "data": [1, true],
                    "valid": true
                },
                {
                    "description": "unique array of objects is valid",
                    "data": [{"foo": "bar"}, {"foo": "baz"}],
                    "valid": true
                },
                {
                    "description": "non-unique array of objects is valid",
                    "data": [{"foo": "bar"}, {"foo": "bar"}],
                    "valid": true
                },
                {
                    "description": "unique array of nested objects is valid",
                    "data": [
                        {"foo": {"bar" : {"baz" : true}}},
                        {"foo": {"bar" : {"baz" : false}}}
                    ],
                    "valid": true
                },
                {
                    "description": "non-unique array of nested objects is valid",
                    "data": [
                        {"foo": {"bar" : {"baz" : true}}},
                        {"foo": {"bar" : {"baz" : true}}}
                    ],
                    "valid": true
                },
                {
                    "description": "unique array of arrays is valid",
                    "data": [["foo"], ["bar"]],
                    "valid": true
                },
                {
                    "description": "non-unique array of arrays is valid",
                    "data": [["foo"], ["foo"]],
                    "valid": true
                },
                {
                    "description": "1 and true are unique",
                    "data": [1, true],
                    "valid": true
                },
                {
                    "description": "0 and false are unique",
                    "data": [0, false],
                    "valid": true
                },
                {
                    "description": "unique heterogeneous types are valid",
                    "data": [{}, [1], true, null, 1],
                    "valid": true
                },
                {
                    "description": "non-unique heterogeneous types are valid",
                    "data": [{}, [1], true, null, {}, 1],
                    "valid": true
                }
            ]
        },
        {
            "description": "uniqueItems=false with an array of items",
            "schema": {
                "items": [{"type": "boolean"}, {"type": "boolean"}],
                "uniqueItems": false
            },
            "tests": [
                {
                    "description": "[false, true] from items array is valid",
                    "data": [false, true],
                    "valid": true
                },
                {
                    "description": "[true, false] from items array is valid",
                    "data": [true, false],
                    "valid": true
                },
                {
                    "description": "[false, false] from items array is valid",
                    "data": [false, false],
                    "valid": true
                },
                {
                    "description": "[true, true] from items array is valid",
                    "data": [true, true],
                    "valid": true
                },
                {
                    "description": "unique array extended from [false, true] is valid",
                    "data": [false, true, "foo", "bar"],
                    "valid": true
                },
                {
                    "description": "unique array extended from [true, false] is valid",
                    "data": [true, false, "foo", "bar"],
                    "valid": true
                },
                {
                    "description": "non-unique array extended from [false, true] is valid",
                    "data": [false, true, "foo", "foo"],
                    "valid": true
                },
                {
                    "description": "non-unique array extended from [true, false] is valid",
                    "data": [true, false, "foo", "foo"],
                    "valid": true
                }
            ]
        },
        {
            "description": "uniqueItems=false with an array of items and additionalItems=false",
            "schema": {
                "items": [{"type": "boolean"}, {"type": "boolean"}],
                "uniqueItems": false,
                "additionalItems": false
            },
            "tests": [
                {
                    "description": "[false, true] from items array is valid",
                    "data": [false, true],
                    "valid": true
                },
                {
                    "description": "[true, false] from items array is valid",
                    "data": [true, false],
                    "valid": true
                },
                {
                    "description": "[false, false] from items array is valid",
                    "data": [false, false],
                    "valid": true
                },
                {
                    "description": "[true, true] from items array is valid",
                    "data": [true, true],
                    "valid": true
                },
                {
                    "description": "extra items are invalid even if unique",
                    "data": [false, true, null],
                    "valid": false
                }
            ]
        }
    ],
    "unknownKeywords": [
        {
            "description": "$id inside an unknown keyword is not a real identifier",
            "comment": "the implementation must not be confused by an $id in locations we do not know how to parse",
            "schema": {
                "definitions": {
                    "id_in_unknown0": {
                        "not": {
                            "array_of_schemas": [
                                {
                                  "$id": "https://localhost:1234/unknownKeyword/my_identifier.json",
                                  "type": "null"
                                }
                            ]
                        }
                    },
                    "real_id_in_schema": {
                        "$id": "https://localhost:1234/unknownKeyword/my_identifier.json",
                        "type": "string"
                    },
                    "id_in_unknown1": {
                        "not": {
                            "object_of_schemas": {
                                "foo": {
                                  "$id": "https://localhost:1234/unknownKeyword/my_identifier.json",
                                  "type": "integer"
                                }
                            }
                        }
                    }
                },
                "anyOf": [
                    { "$ref": "#/definitions/id_in_unknown0" },
                    { "$ref": "#/definitions/id_in_unknown1" },
                    { "$ref": "https://localhost:1234/unknownKeyword/my_identifier.json" }
                ]
            },
            "tests": [
                {
                    "description": "type matches second anyOf, which has a real schema in it",
                    "data": "a string",
                    "valid": true
                },
                {
                    "description": "type matches non-schema in first anyOf",
                    "data": null,
                    "valid": false
                },
                {
                    "description": "type matches non-schema in third anyOf",
                    "data": 1,
                    "valid": false
                }
            ]
        }
    ]
}